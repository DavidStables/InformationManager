Prefix(:=<http://www.DiscoveryDataService.org/InformationModel/DiscoveryOntology#>)
Prefix(cm:=<http://www.DiscoveryDataService.org/InformationModel/DiscoveryCore#>)
Prefix(rm:=<http://www.DiscoveryDataService.org/InformationModel/RecordModel#>)
Prefix(sn:=<http://www.DiscoveryDataService.org/InformationModel/Snomed-CT#>)
Prefix(arc:=<http://www.DiscoveryDataService.org/InformationModel/Archetype#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.DiscoveryDataService.org/InformationModel/DiscoveryOntology>

Declaration(Class(arc:AandE))
Declaration(Class(arc:HospitalAdmission))
Declaration(Class(arc:HospitalDischarge))
Declaration(Class(arc:HospitalOutpatient))
Declaration(Class(arc:NHSPatient))
Declaration(Class(cm:AEAttCat1))
Declaration(Class(cm:AEAttCat2))
Declaration(Class(cm:AEAttCat3))
Declaration(Class(cm:AEAttNotAtt0))
Declaration(Class(cm:AEAttendanceCat))
Declaration(Class(cm:AEDepType1))
Declaration(Class(cm:AEDepType2))
Declaration(Class(cm:AEDepType3))
Declaration(Class(cm:AEDepType4))
Declaration(Class(cm:AandEAttendance))
Declaration(Class(cm:AccidentAndEmergencySetting))
Declaration(Class(cm:ActiveInactive))
Declaration(Class(cm:ActiveStatus))
Declaration(Class(cm:AdmBabyRelated))
Declaration(Class(cm:AdmClassDayCase))
Declaration(Class(cm:AdmClassMotherBabyDelivery))
Declaration(Class(cm:AdmClassOrdinary))
Declaration(Class(cm:AdmClassRegularDay))
Declaration(Class(cm:AdmClassRegularNight))
Declaration(Class(cm:AdmElectiveEncounter))
Declaration(Class(cm:AdmMetBBhok))
Declaration(Class(cm:AdmMetBedBureau))
Declaration(Class(cm:AdmMetBirthHere))
Declaration(Class(cm:AdmMetBirthOut))
Declaration(Class(cm:AdmMetBooked))
Declaration(Class(cm:AdmMetCasElsewhere))
Declaration(Class(cm:AdmMetCasSame))
Declaration(Class(cm:AdmMetConClin))
Declaration(Class(cm:AdmMetEMore))
Declaration(Class(cm:AdmMetElective))
Declaration(Class(cm:AdmMetEmergency))
Declaration(Class(cm:AdmMetGpDirect))
Declaration(Class(cm:AdmMetHosTran))
Declaration(Class(cm:AdmMetMatAP))
Declaration(Class(cm:AdmMetMatPP))
Declaration(Class(cm:AdmMetMaternity))
Declaration(Class(cm:AdmMetMheCrisis))
Declaration(Class(cm:AdmMetPlanned))
Declaration(Class(cm:AdmMethWa))
Declaration(Class(cm:AdmNonETransfer))
Declaration(Class(cm:AdminCat01))
Declaration(Class(cm:AdminCat02))
Declaration(Class(cm:AdminCat03))
Declaration(Class(cm:AdminCat04))
Declaration(Class(cm:AdminCategory))
Declaration(Class(cm:AdministrationFiling))
Declaration(Class(cm:AdministrativeEntry))
Declaration(Class(cm:Admission))
Declaration(Class(cm:AdmissionMethod))
Declaration(Class(cm:AdmissionPatientClass))
Declaration(Class(cm:AdmissionSource))
Declaration(Class(cm:AttNotAtt00))
Declaration(Class(cm:AttNotAtt2))
Declaration(Class(cm:AttNotAtt5))
Declaration(Class(cm:AttNotAtt6))
Declaration(Class(cm:AttNotAtt7))
Declaration(Class(cm:AttNotAttAtt))
Declaration(Class(cm:AttNotAttNot))
Declaration(Class(cm:AttOpd1))
Declaration(Class(cm:AttOpd2))
Declaration(Class(cm:AttOpd3))
Declaration(Class(cm:AttOutcome0))
Declaration(Class(cm:AttnotAtt3))
Declaration(Class(cm:AttnotAtt4))
Declaration(Class(cm:CancelHospEvent))
Declaration(Class(cm:CareAdministration))
Declaration(Class(cm:CareSetting))
Declaration(Class(cm:ClinicEncounter))
Declaration(Class(cm:Clinic_or_Health_Centre))
Declaration(Class(cm:CodeScheme))
Declaration(Class(cm:Computer))
Declaration(Class(cm:ComputerEncounter))
Declaration(Class(cm:Consultation))
Declaration(Class(cm:CoreActive))
Declaration(Class(cm:CoreDraft))
Declaration(Class(cm:CoreInactive))
Declaration(Class(cm:CoreSnapshot))
Declaration(Class(cm:CoreStatus))
Declaration(Class(cm:CreateEntry))
Declaration(Class(cm:CrudOperation))
Declaration(Class(cm:DISC_5059))
Declaration(Class(cm:DISC_5061))
Declaration(Class(cm:DISC_5062))
Declaration(Class(cm:DISC_5063))
Declaration(Class(cm:DISC_5064))
Declaration(Class(cm:DISC_5065))
Declaration(Class(cm:DISC_5066))
Declaration(Class(cm:DISC_5067))
Declaration(Class(cm:DISC_5068))
Declaration(Class(cm:Day_case))
Declaration(Class(cm:DefinitionalStatus))
Declaration(Class(cm:DeleteEntry))
Declaration(Class(cm:DeltaUpdate))
Declaration(Class(cm:DidNotAttend))
Declaration(Class(cm:DidNotAttendEncounter))
Declaration(Class(cm:DisDest0))
Declaration(Class(cm:DisDest30))
Declaration(Class(cm:DisDest38))
Declaration(Class(cm:DisDest48))
Declaration(Class(cm:DisDest49))
Declaration(Class(cm:DisDest50))
Declaration(Class(cm:DisDest51))
Declaration(Class(cm:DisDest79))
Declaration(Class(cm:DisDest84))
Declaration(Class(cm:DisMethod0))
Declaration(Class(cm:DisMethod1))
Declaration(Class(cm:DisMethod2))
Declaration(Class(cm:DisMethod3))
Declaration(Class(cm:DisMethod4))
Declaration(Class(cm:DisMethod5))
Declaration(Class(cm:DisMethod6))
Declaration(Class(cm:DisMethod7))
Declaration(Class(cm:Discharge))
Declaration(Class(cm:DraftRelease))
Declaration(Class(cm:DraftStatus))
Declaration(Class(cm:EmailConsultation))
Declaration(Class(cm:EmergAdmitEncounter))
Declaration(Class(cm:EncounterDevice))
Declaration(Class(cm:EncounterType))
Declaration(Class(cm:EncounterUsingDevice))
Declaration(Class(cm:Encowincu))
Declaration(Class(cm:EndHospEvent))
Declaration(Class(cm:Field))
Declaration(Class(cm:FilingDocEncounter))
Declaration(Class(cm:GConsultationGroup))
Declaration(Class(cm:GPSurgeryConsultation))
Declaration(Class(cm:General_Practice_surgery))
Declaration(Class(cm:HealthAndCare))
Declaration(Class(cm:Home))
Declaration(Class(cm:HomeVisit))
Declaration(Class(cm:HospOpdEncounter))
Declaration(Class(cm:Hospital))
Declaration(Class(cm:HospitalAdmissionEncounter))
Declaration(Class(cm:HospitalDischargeEncounter))
Declaration(Class(cm:HospitalEncounter))
Declaration(Class(cm:HospitalInpAdmitEncounter))
Declaration(Class(cm:HospitalInpDischEncounter))
Declaration(Class(cm:HospitalInpEncounter))
Declaration(Class(cm:InactiveStatus))
Declaration(Class(cm:Initial))
Declaration(Class(cm:InitialAssessment))
Declaration(Class(cm:Inpatient))
Declaration(Class(cm:LegacyActive))
Declaration(Class(cm:LegacyInactive))
Declaration(Class(cm:LegacyStatus))
Declaration(Class(cm:MailToPatient))
Declaration(Class(cm:MailToPatientEncounter))
Declaration(Class(cm:MaternityAdmission))
Declaration(Class(cm:ModelComponentStatus))
Declaration(Class(cm:ModelDeltaUpdate))
Declaration(Class(cm:ModelDocumentInfo))
Declaration(Class(cm:ModelDocumentPurpose))
Declaration(Class(cm:ModellingConcept))
Declaration(Class(cm:NHSPatient))
Declaration(Class(cm:NecessaryAndSufficient))
Declaration(Class(cm:NecessaryButInsufficient))
Declaration(Class(cm:NightVisit))
Declaration(Class(cm:NoteEncounter))
Declaration(Class(cm:NoteEntered))
Declaration(Class(cm:ObservationType))
Declaration(Class(cm:OnPremiseEncounter))
Declaration(Class(cm:OnPremises))
Declaration(Class(cm:OnWaitingList))
Declaration(Class(cm:OrganisationType))
Declaration(Class(cm:Outpatient))
Declaration(Class(cm:Patient))
Declaration(Class(cm:Patient_and_health_professional))
Declaration(Class(cm:PeersonRole))
Declaration(Class(cm:PersonCareType))
Declaration(Class(cm:Pre-admission))
Declaration(Class(cm:PreDsicharge))
Declaration(Class(cm:ProvenanceActivity))
Declaration(Class(cm:PublishedStatus))
Declaration(Class(cm:RecordSection))
Declaration(Class(cm:RecordUpdated))
Declaration(Class(cm:ReferenceDocument))
Declaration(Class(cm:ReleaseStatus))
Declaration(Class(cm:ReportFiled))
Declaration(Class(cm:SN_386053000))
Declaration(Class(cm:SrcAdmA1))
Declaration(Class(cm:SrcAdmA2))
Declaration(Class(cm:SrcAdmA3))
Declaration(Class(cm:SrcAdmA4))
Declaration(Class(cm:SrcAdmA5))
Declaration(Class(cm:SrcAdmA6))
Declaration(Class(cm:SrcAdmA7))
Declaration(Class(cm:SrcAdmA8))
Declaration(Class(cm:SrcAdmA9))
Declaration(Class(cm:SrcAdmCo))
Declaration(Class(cm:SrcAdmPSyHosp))
Declaration(Class(cm:SrcAdmPe))
Declaration(Class(cm:SrcAdmPePoCo))
Declaration(Class(cm:SrcAdmPo))
Declaration(Class(cm:SrcAdmTempR))
Declaration(Class(cm:SrcAdmUsual))
Declaration(Class(cm:SrcAsmA10))
Declaration(Class(cm:SurgeryPodEncounter))
Declaration(Class(cm:Surgery_pod))
Declaration(Class(cm:TeamMeeting))
Declaration(Class(cm:TelephoneConsultation))
Declaration(Class(cm:TelephoneTriage))
Declaration(Class(cm:ThirdPartyConsultation))
Declaration(Class(cm:ThirdPartyTelcon))
Declaration(Class(cm:Transfer))
Declaration(Class(cm:TransferCareClassification))
Declaration(Class(cm:TransferInpOp))
Declaration(Class(cm:TransferOpInp))
Declaration(Class(cm:TransferWl))
Declaration(Class(cm:TransferWlInpOp))
Declaration(Class(cm:TransferWlOpInp))
Declaration(Class(cm:Triage))
Declaration(Class(cm:TriageAssessmentEncounter))
Declaration(Class(cm:UpdateEntry))
Declaration(Class(cm:UpdateRecordEncounter))
Declaration(Class(cm:UsageStatus))
Declaration(Class(cm:VideoConsultation))
Declaration(Class(cm:WlPreadmit))
Declaration(Class(cm:eam))
Declaration(Class(cm:hird_party_hcp))
Declaration(Class(cm:oohwuc))
Declaration(Class(cm:ransactionalUpdate))
Declaration(Class(rm:ENProvenanceEntity))
Declaration(Class(rm:EncounterRecord))
Declaration(Class(rm:HealthEvent))
Declaration(Class(rm:HospitalSpell))
Declaration(Class(rm:Identifier))
Declaration(Class(rm:NHSOrganisation))
Declaration(Class(rm:Observation))
Declaration(Class(rm:Organisation))
Declaration(Class(rm:Person))
Declaration(Class(rm:ProvenanceSummary))
Declaration(Class(rm:RecordModel))
Declaration(Class(sn:SN_224930009))
Declaration(Class(sn:SN_2546009))
Declaration(Class(sn:SN_257194007))
Declaration(Class(sn:SN_308913005))
Declaration(Class(sn:SN_325931000000109))
Declaration(Class(sn:SN_359993007))
Declaration(Class(sn:SN_721421000000101))
Declaration(Class(sn:SN_999002981000000107))
Declaration(Class(sn:SN_999002991000000109))
Declaration(ObjectProperty(cm:CareEventType))
Declaration(ObjectProperty(cm:DISC_5081))
Declaration(ObjectProperty(cm:aeAttendanceCategory))
Declaration(ObjectProperty(cm:arrivalMode))
Declaration(ObjectProperty(cm:care_setting))
Declaration(ObjectProperty(cm:entryClass))
Declaration(ObjectProperty(cm:fromCareClassification))
Declaration(ObjectProperty(cm:generated))
Declaration(ObjectProperty(cm:haSubsidiary))
Declaration(ObjectProperty(cm:hasActivity))
Declaration(ObjectProperty(cm:hasActivityType))
Declaration(ObjectProperty(cm:hasCrudOperation))
Declaration(ObjectProperty(cm:hasDataController))
Declaration(ObjectProperty(cm:hasDischargeDestination))
Declaration(ObjectProperty(cm:hasDischargeMethod))
Declaration(ObjectProperty(cm:hasEncounterType))
Declaration(ObjectProperty(cm:hasEventTypeOf))
Declaration(ObjectProperty(cm:hasIdentifier))
Declaration(ObjectProperty(cm:hasObservationType))
Declaration(ObjectProperty(cm:hasPersonRole))
Declaration(ObjectProperty(cm:hasProvenance))
Declaration(ObjectProperty(cm:hasRecordHeldBy))
Declaration(ObjectProperty(cm:hasResourceLocatorType))
Declaration(ObjectProperty(cm:hasSubject))
Declaration(ObjectProperty(cm:has_person_role))
Declaration(ObjectProperty(cm:isDataControllerOf))
Declaration(ObjectProperty(cm:isProcess))
Declaration(ObjectProperty(cm:isProvenanceFor))
Declaration(ObjectProperty(cm:isRecordModelField))
Declaration(ObjectProperty(cm:isRoleOf))
Declaration(ObjectProperty(cm:isSubcomponentOf))
Declaration(ObjectProperty(cm:isSubjectOf))
Declaration(ObjectProperty(cm:isSubsidiaryTo))
Declaration(ObjectProperty(cm:isUnderHeading))
Declaration(ObjectProperty(cm:method))
Declaration(ObjectProperty(cm:methodOfAdmssion))
Declaration(ObjectProperty(cm:onCareClassification))
Declaration(ObjectProperty(cm:partOfEncounter))
Declaration(ObjectProperty(cm:participants))
Declaration(ObjectProperty(cm:sourceOfAdmission))
Declaration(ObjectProperty(cm:timeOrder))
Declaration(ObjectProperty(cm:toCareClassification))
Declaration(ObjectProperty(cm:treatmentFunctionAdmit))
Declaration(ObjectProperty(cm:treatmentSpecialty))
Declaration(ObjectProperty(cm:usesDevice))
Declaration(ObjectProperty(cm:wasDerivedFrom))
Declaration(ObjectProperty(cm:wasGeneratedBy))
Declaration(ObjectProperty(cm:wasPerformedBy))
Declaration(ObjectProperty(rm:aAndEDepartmentType))
Declaration(ObjectProperty(rm:adminCategoryonAdmission))
Declaration(ObjectProperty(rm:administrativePaymentCategory))
Declaration(ObjectProperty(rm:admissionPatientClassification))
Declaration(ObjectProperty(rm:aeAttendanceSource))
Declaration(ObjectProperty(rm:attendanceStatus))
Declaration(ObjectProperty(rm:hasAttendanceOutcome))
Declaration(ObjectProperty(rm:hasOrganisationType))
Declaration(ObjectProperty(rm:hasRole))
Declaration(ObjectProperty(sn:SN_260870009))
Declaration(ObjectProperty(sn:SN_370134009))
Declaration(ObjectProperty(sn:SN_424226004))
Declaration(ObjectProperty(owl:topObjectProperty))
Declaration(DataProperty(cm:Code))
Declaration(DataProperty(cm:booleanProperty))
Declaration(DataProperty(cm:codeProperty))
Declaration(DataProperty(cm:dateTimeProperty))
Declaration(DataProperty(cm:hasActivityTime))
Declaration(DataProperty(cm:hasCode))
Declaration(DataProperty(cm:hasCodePrefix))
Declaration(DataProperty(cm:hasComponentDate))
Declaration(DataProperty(cm:hasDateOfBirth))
Declaration(DataProperty(cm:hasDateTimeOfEntry))
Declaration(DataProperty(cm:hasEffectiveDate))
Declaration(DataProperty(cm:hasEndTime))
Declaration(DataProperty(cm:hasHeading))
Declaration(DataProperty(cm:hasIdentifierScheme))
Declaration(DataProperty(cm:hasIdentifierValue))
Declaration(DataProperty(cm:hasOdsCode))
Declaration(DataProperty(cm:hasReportIdentifier))
Declaration(DataProperty(cm:hasReportName))
Declaration(DataProperty(cm:hasResourceLocation))
Declaration(DataProperty(cm:hasTermForClient))
Declaration(DataProperty(cm:hasTransactionNumber))
Declaration(DataProperty(cm:hasUpdateTime))
Declaration(DataProperty(cm:id))
Declaration(DataProperty(cm:integerProperty))
Declaration(DataProperty(cm:isRecordModelDataField))
Declaration(DataProperty(cm:isRecordModelEntity))
Declaration(DataProperty(cm:numericProperty))
Declaration(DataProperty(cm:textProperty))
Declaration(AnnotationProperty(cm:AnnotationProperty))
Declaration(AnnotationProperty(cm:hasDescription))
Declaration(AnnotationProperty(cm:hasIri))
Declaration(AnnotationProperty(cm:hasName))
Declaration(AnnotationProperty(cm:hasStatus))
Declaration(AnnotationProperty(cm:status))
Declaration(AnnotationProperty(cm:usedIn))
Declaration(Datatype(cm:DateTime))
############################
#   Annotation Properties
############################

# Annotation Property: cm:AnnotationProperty (Annotation property)

AnnotationAssertion(rdfs:comment cm:AnnotationProperty "a property used in the information model of annotating classes")
AnnotationAssertion(rdfs:label cm:AnnotationProperty "Annotation property")

# Annotation Property: cm:hasDescription (has description)

AnnotationAssertion(rdfs:comment cm:hasDescription "description of object property or class")
AnnotationAssertion(rdfs:label cm:hasDescription "has description")
SubAnnotationPropertyOf(cm:hasDescription cm:AnnotationProperty)

# Annotation Property: cm:hasIri (has iri)

AnnotationAssertion(rdfs:comment cm:hasIri "property that has a universal identifier as its value, reserved property")
AnnotationAssertion(rdfs:label cm:hasIri "has iri")
SubAnnotationPropertyOf(cm:hasIri cm:AnnotationProperty)

# Annotation Property: cm:hasName (has name)

AnnotationAssertion(rdfs:comment cm:hasName "The name property of a concept or other structure")
AnnotationAssertion(rdfs:label cm:hasName "has name")
SubAnnotationPropertyOf(cm:hasName cm:AnnotationProperty)

# Annotation Property: cm:hasStatus (has status)

AnnotationAssertion(rdfs:comment cm:hasStatus "status of component")
AnnotationAssertion(rdfs:label cm:hasStatus "has status")
SubAnnotationPropertyOf(cm:hasStatus cm:AnnotationProperty)
AnnotationPropertyRange(cm:hasStatus cm:ModelComponentStatus)

# Annotation Property: cm:usedIn (used in)

AnnotationAssertion(rdfs:label cm:usedIn "used in")
SubAnnotationPropertyOf(cm:usedIn cm:AnnotationProperty)
AnnotationPropertyRange(cm:usedIn xsd:string)


############################
#   Object Properties
############################

# Object Property: cm:CareEventType (has care event type)

AnnotationAssertion(cm:usedIn cm:CareEventType "Used in events in particular such as encounters, observations etc")
AnnotationAssertion(rdfs:comment cm:CareEventType "Points to the overall or main nature of the entry, usually a business process or observable concept of some kind e.g. an Encounter -> type -> Telephone consultation, or observation ->type-> Chest pain")
AnnotationAssertion(rdfs:label cm:CareEventType "has care event type")
SubObjectPropertyOf(cm:CareEventType owl:topObjectProperty)

# Object Property: cm:DISC_5081 (operates within the sector of)

AnnotationAssertion(rdfs:comment cm:DISC_5081 "Indicates which sector the speciality works in")
AnnotationAssertion(rdfs:label cm:DISC_5081 "operates within the sector of")
SubObjectPropertyOf(cm:DISC_5081 owl:topObjectProperty)

# Object Property: cm:aeAttendanceCategory (has a&e category of attendance of)

AnnotationAssertion(rdfs:comment cm:aeAttendanceCategory "points to the category of attendance whether first, subsequent, planned or unplanned")
AnnotationAssertion(rdfs:label cm:aeAttendanceCategory "has a&e category of attendance of")
SubObjectPropertyOf(cm:aeAttendanceCategory cm:isRecordModelField)
FunctionalObjectProperty(cm:aeAttendanceCategory)
ObjectPropertyRange(cm:aeAttendanceCategory cm:AEAttendanceCat)

# Object Property: cm:arrivalMode (has arrival mode)

AnnotationAssertion(rdfs:comment cm:arrivalMode "points to the mode of arrival in accident and emergency")
AnnotationAssertion(rdfs:label cm:arrivalMode "has arrival mode")
SubObjectPropertyOf(cm:arrivalMode cm:isRecordModelField)
FunctionalObjectProperty(cm:arrivalMode)
ObjectPropertyRange(cm:arrivalMode sn:SN_999002981000000107)

# Object Property: cm:care_setting (takes place in care setting)

AnnotationAssertion(rdfs:comment cm:care_setting "points to a care setting.")
AnnotationAssertion(rdfs:label cm:care_setting "takes place in care setting")
SubObjectPropertyOf(cm:care_setting owl:topObjectProperty)
ObjectPropertyDomain(cm:care_setting cm:EncounterType)
ObjectPropertyRange(cm:care_setting cm:CareSetting)

# Object Property: cm:entryClass (is entry class)

AnnotationAssertion(rdfs:comment cm:entryClass "a tautoligical property indicating that the object is an entry as stored in a database. Its use is to indicate to implementors who are using high level entity types, as to the nature of the content of the entry i.e. the archetype")
AnnotationAssertion(rdfs:label cm:entryClass "is entry class")
SubObjectPropertyOf(cm:entryClass owl:topObjectProperty)
FunctionalObjectProperty(cm:entryClass)

# Object Property: cm:fromCareClassification (from care classification)

AnnotationAssertion(rdfs:comment cm:fromCareClassification "points to the preceding care classification in a transfer")
AnnotationAssertion(rdfs:label cm:fromCareClassification "from care classification")
SubObjectPropertyOf(cm:fromCareClassification owl:topObjectProperty)

# Object Property: cm:generated (generated)

AnnotationAssertion(rdfs:comment cm:generated "An activity generated an entity of some kind")
AnnotationAssertion(rdfs:label cm:generated "generated")
InverseObjectProperties(cm:generated cm:wasGeneratedBy)

# Object Property: cm:haSubsidiary (has subsidiary)

AnnotationAssertion(rdfs:comment cm:haSubsidiary "points to a sub encounter or subsidiary event or entity")
AnnotationAssertion(rdfs:label cm:haSubsidiary "has subsidiary")
SubObjectPropertyOf(cm:haSubsidiary cm:isRecordModelField)
InverseObjectProperties(cm:haSubsidiary cm:isSubsidiaryTo)

# Object Property: cm:hasActivity (has activity)

AnnotationAssertion(rdfs:comment cm:hasActivity "references the activity relevant to the item e.g. a provenance activity")
AnnotationAssertion(rdfs:label cm:hasActivity "has activity")

# Object Property: cm:hasActivityType (has activity type)

AnnotationAssertion(rdfs:comment cm:hasActivityType "references the type of activity that occurred with the activity e.g. update of a data entry, delete or transformation")
AnnotationAssertion(rdfs:label cm:hasActivityType "has activity type")
SubObjectPropertyOf(cm:hasActivityType owl:topObjectProperty)

# Object Property: cm:hasCrudOperation (has crud operation)

AnnotationAssertion(rdfs:comment cm:hasCrudOperation "create read update and delete operations to the data store")
AnnotationAssertion(rdfs:label cm:hasCrudOperation "has crud operation")
SubObjectPropertyOf(cm:hasCrudOperation owl:topObjectProperty)

# Object Property: cm:hasDataController (has data controller)

AnnotationAssertion(rdfs:comment cm:hasDataController "references the organisation that is the data controller of the record entry (or sub organisation of that data controller)")
AnnotationAssertion(rdfs:label cm:hasDataController "has data controller")
SubObjectPropertyOf(cm:hasDataController cm:isRecordModelField)
InverseObjectProperties(cm:hasDataController cm:isDataControllerOf)
ObjectPropertyRange(cm:hasDataController rm:Organisation)

# Object Property: cm:hasDischargeDestination (has discharge destination)

AnnotationAssertion(rdfs:comment cm:hasDischargeDestination "pints to the type of place a patient was discharged to")
AnnotationAssertion(rdfs:label cm:hasDischargeDestination "has discharge destination")
SubObjectPropertyOf(cm:hasDischargeDestination cm:isRecordModelField)
FunctionalObjectProperty(cm:hasDischargeDestination)
ObjectPropertyRange(cm:hasDischargeDestination cm:DisDest0)

# Object Property: cm:hasDischargeMethod (has discharge method)

AnnotationAssertion(rdfs:comment cm:hasDischargeMethod "ponts to the method of discharge of the patient")
AnnotationAssertion(rdfs:label cm:hasDischargeMethod "has discharge method")
SubObjectPropertyOf(cm:hasDischargeMethod cm:isRecordModelField)
FunctionalObjectProperty(cm:hasDischargeMethod)
ObjectPropertyRange(cm:hasDischargeMethod cm:DisMethod0)

# Object Property: cm:hasEncounterType (has encounter type)

AnnotationAssertion(rdfs:comment cm:hasEncounterType "The type of this data entity, this is normally referring to itself at the level of the class i.e. a subclass in the data model may have a field that points to itself as its value. For exampe an encounter -> has type> Self")
AnnotationAssertion(rdfs:label cm:hasEncounterType "has encounter type")
SubObjectPropertyOf(cm:hasEncounterType cm:isRecordModelField)
FunctionalObjectProperty(cm:hasEncounterType)
ObjectPropertyDomain(cm:hasEncounterType rm:EncounterRecord)
ObjectPropertyRange(cm:hasEncounterType cm:EncounterType)

# Object Property: cm:hasEventTypeOf (has event type of)

AnnotationAssertion(rdfs:comment cm:hasEventTypeOf "references the concept that describes the type of event")
AnnotationAssertion(rdfs:label cm:hasEventTypeOf "has event type of")
SubObjectPropertyOf(cm:hasEventTypeOf owl:topObjectProperty)

# Object Property: cm:hasIdentifier (has identifier)

AnnotationAssertion(rdfs:comment cm:hasIdentifier "points to an identifer. A DB schema map would normally de-normalise an identifier field to hold the actual value.")
AnnotationAssertion(rdfs:label cm:hasIdentifier "has identifier")
SubObjectPropertyOf(cm:hasIdentifier cm:isRecordModelField)
FunctionalObjectProperty(cm:hasIdentifier)
ObjectPropertyRange(cm:hasIdentifier rm:Identifier)

# Object Property: cm:hasObservationType (has observation type)

AnnotationAssertion(rdfs:comment cm:hasObservationType "points to the main observation concept e.g. pulse rate, asthma")
AnnotationAssertion(rdfs:label cm:hasObservationType "has observation type")
SubObjectPropertyOf(cm:hasObservationType cm:isRecordModelField)
FunctionalObjectProperty(cm:hasObservationType)
ObjectPropertyDomain(cm:hasObservationType rm:Observation)
ObjectPropertyRange(cm:hasObservationType cm:ObservationType)

# Object Property: cm:hasPersonRole (has person role)

AnnotationAssertion(rdfs:comment cm:hasPersonRole "Points to the role of the person")
AnnotationAssertion(rdfs:label cm:hasPersonRole "has person role")
SubObjectPropertyOf(cm:hasPersonRole cm:isRecordModelField)
FunctionalObjectProperty(cm:hasPersonRole)
ObjectPropertyDomain(cm:hasPersonRole rm:Person)
ObjectPropertyRange(cm:hasPersonRole cm:PeersonRole)

# Object Property: cm:hasProvenance (has provenance)

AnnotationAssertion(rdfs:comment cm:hasProvenance "references the provenence of an entry i.e the history of the entry or its contents going back to its original creation")
AnnotationAssertion(rdfs:label cm:hasProvenance "has provenance")
SubObjectPropertyOf(cm:hasProvenance cm:isRecordModelField)
InverseObjectProperties(cm:hasProvenance cm:isProvenanceFor)

# Object Property: cm:hasRecordHeldBy (has record held by)

AnnotationAssertion(rdfs:comment cm:hasRecordHeldBy "relationship pointing to the organisaion that holds the record for patient or client")
AnnotationAssertion(rdfs:label cm:hasRecordHeldBy "has record held by")

# Object Property: cm:hasResourceLocatorType (has resource locator type)

AnnotationAssertion(rdfs:comment cm:hasResourceLocatorType "the nature of the resource location e.g. URL, IRI, domain, directory etc")
AnnotationAssertion(rdfs:label cm:hasResourceLocatorType "has resource locator type")
SubObjectPropertyOf(cm:hasResourceLocatorType owl:topObjectProperty)

# Object Property: cm:hasSubject (has subject)

AnnotationAssertion(rdfs:comment cm:hasSubject "points to the patient this record is about")
AnnotationAssertion(rdfs:label cm:hasSubject "has subject")
SubObjectPropertyOf(cm:hasSubject cm:isRecordModelField)
InverseObjectProperties(cm:hasSubject cm:isSubjectOf)
FunctionalObjectProperty(cm:hasSubject)
ObjectPropertyRange(cm:hasSubject cm:Patient)

# Object Property: cm:has_person_role (has patient care classification)

AnnotationAssertion(rdfs:comment cm:has_person_role "Points to a category of the patient/ person at the time of the event e.g. patient outpatient, inpatient")
AnnotationAssertion(rdfs:label cm:has_person_role "has patient care classification")
SubObjectPropertyOf(cm:has_person_role owl:topObjectProperty)

# Object Property: cm:isDataControllerOf (is data controller for)

AnnotationAssertion(rdfs:comment cm:isDataControllerOf "References the entry that the organisation is data controller of. Inverse property of 'has data controller'")
AnnotationAssertion(rdfs:label cm:isDataControllerOf "is data controller for")

# Object Property: cm:isProcess (is process)

AnnotationAssertion(rdfs:comment cm:isProcess "points to a type of care administration process such as an admission discharge or administration note")
AnnotationAssertion(rdfs:label cm:isProcess "is process")
SubObjectPropertyOf(cm:isProcess owl:topObjectProperty)

# Object Property: cm:isProvenanceFor (is provenance for)

AnnotationAssertion(rdfs:comment cm:isProvenanceFor "points to the record entry that this is the provenance for")
AnnotationAssertion(rdfs:label cm:isProvenanceFor "is provenance for")
SubObjectPropertyOf(cm:isProvenanceFor cm:isRecordModelField)
ObjectPropertyDomain(cm:isProvenanceFor rm:ProvenanceSummary)

# Object Property: cm:isRecordModelField (is dm object property)

AnnotationAssertion(rdfs:comment cm:isRecordModelField "A property that would be used in the data store  as a table field) as opposed to a property that is part of the definition of the class and points to an object (concept) or other entity (foreign key)")
AnnotationAssertion(rdfs:label cm:isRecordModelField "is dm object property")
SubObjectPropertyOf(cm:isRecordModelField owl:topObjectProperty)

# Object Property: cm:isRoleOf (is a role of)

AnnotationAssertion(rdfs:comment cm:isRoleOf "indicates that the entity is a role assumed by another entity e.g. a patient is a role of a person")
AnnotationAssertion(rdfs:label cm:isRoleOf "is a role of")
InverseObjectProperties(cm:isRoleOf rm:hasRole)

# Object Property: cm:isSubcomponentOf (is subcomponent of)

AnnotationAssertion(rdfs:comment cm:isSubcomponentOf "the entity is part of another entity e.g. a parent observation")
AnnotationAssertion(rdfs:label cm:isSubcomponentOf "is subcomponent of")
SubObjectPropertyOf(cm:isSubcomponentOf cm:isRecordModelField)

# Object Property: cm:isSubjectOf (is subject of)

AnnotationAssertion(rdfs:comment cm:isSubjectOf "references the entries that this object is the subject of e.g. Patient 'is subject of' Encounter")
AnnotationAssertion(rdfs:label cm:isSubjectOf "is subject of")

# Object Property: cm:isSubsidiaryTo (is subsidiary to)

AnnotationAssertion(rdfs:comment cm:isSubsidiaryTo "An entity is subsidiary to another entity e,g, subencounter or subcomponent")
AnnotationAssertion(rdfs:label cm:isSubsidiaryTo "is subsidiary to")
SubObjectPropertyOf(cm:isSubsidiaryTo cm:isRecordModelField)
FunctionalObjectProperty(cm:isSubsidiaryTo)

# Object Property: cm:isUnderHeading (is under the heading)

AnnotationAssertion(rdfs:comment cm:isUnderHeading "points to the section that this heading is under")
AnnotationAssertion(rdfs:label cm:isUnderHeading "is under the heading")
SubObjectPropertyOf(cm:isUnderHeading cm:isRecordModelField)
ObjectPropertyDomain(cm:isUnderHeading cm:RecordSection)
ObjectPropertyRange(cm:isUnderHeading cm:RecordSection)

# Object Property: cm:method (method (attribute))

AnnotationAssertion(rdfs:comment cm:method "Snomed method attribute - 260686004")
AnnotationAssertion(rdfs:label cm:method "method (attribute)")
SubObjectPropertyOf(cm:method owl:topObjectProperty)

# Object Property: cm:methodOfAdmssion (has admission method)

AnnotationAssertion(rdfs:comment cm:methodOfAdmssion "Points to the method of admission such as whether from waiting list, booked or from A&e or direct from GP")
AnnotationAssertion(rdfs:label cm:methodOfAdmssion "has admission method")
SubObjectPropertyOf(cm:methodOfAdmssion cm:isRecordModelField)
FunctionalObjectProperty(cm:methodOfAdmssion)
ObjectPropertyRange(cm:methodOfAdmssion cm:AdmissionMethod)

# Object Property: cm:onCareClassification (on care classification)

AnnotationAssertion(rdfs:comment cm:onCareClassification "points to the classification of care the patient is on whilst activity is being performed e.g. on waiting list")
AnnotationAssertion(rdfs:label cm:onCareClassification "on care classification")
SubObjectPropertyOf(cm:onCareClassification owl:topObjectProperty)

# Object Property: cm:partOfEncounter (is part of encounter)

AnnotationAssertion(rdfs:comment cm:partOfEncounter "points to the encounter this is part of")
AnnotationAssertion(rdfs:label cm:partOfEncounter "is part of encounter")
SubObjectPropertyOf(cm:partOfEncounter cm:isRecordModelField)
ObjectPropertyRange(cm:partOfEncounter cm:EncounterType)

# Object Property: cm:participants (has participants)

AnnotationAssertion(rdfs:comment cm:participants "The type of people the encounter took place between e.g. the patient and health professiona;, third party and health professional, team etc")
AnnotationAssertion(rdfs:label cm:participants "has participants")
SubObjectPropertyOf(cm:participants owl:topObjectProperty)

# Object Property: cm:sourceOfAdmission (has admission source)

AnnotationAssertion(rdfs:comment cm:sourceOfAdmission "Points to the source of admission of the patient")
AnnotationAssertion(rdfs:label cm:sourceOfAdmission "has admission source")
SubObjectPropertyOf(cm:sourceOfAdmission cm:isRecordModelField)
FunctionalObjectProperty(cm:sourceOfAdmission)
ObjectPropertyRange(cm:sourceOfAdmission cm:AdmissionSource)

# Object Property: cm:timeOrder (has time order)

AnnotationAssertion(rdfs:comment cm:timeOrder "points to the order of something relative to something else e.g. initial subsequent following etc")
AnnotationAssertion(rdfs:label cm:timeOrder "has time order")
SubObjectPropertyOf(cm:timeOrder owl:topObjectProperty)

# Object Property: cm:toCareClassification (to care classification)

AnnotationAssertion(rdfs:comment cm:toCareClassification "points to the subsequent care classification of the patient e.g. to inpatient")
AnnotationAssertion(rdfs:label cm:toCareClassification "to care classification")
SubObjectPropertyOf(cm:toCareClassification owl:topObjectProperty)

# Object Property: cm:treatmentFunctionAdmit (treatment function for service for which admitted)

AnnotationAssertion(rdfs:comment cm:treatmentFunctionAdmit "Treatment function / speciality service for which admitted")
AnnotationAssertion(rdfs:label cm:treatmentFunctionAdmit "treatment function for service for which admitted")
SubObjectPropertyOf(cm:treatmentFunctionAdmit cm:isRecordModelField)
FunctionalObjectProperty(cm:treatmentFunctionAdmit)
ObjectPropertyRange(cm:treatmentFunctionAdmit sn:SN_224930009)

# Object Property: cm:treatmentSpecialty (treatment function type)

AnnotationAssertion(rdfs:comment cm:treatmentSpecialty "points to a treatment specialty service type")
AnnotationAssertion(rdfs:label cm:treatmentSpecialty "treatment function type")
SubObjectPropertyOf(cm:treatmentSpecialty cm:isRecordModelField)
FunctionalObjectProperty(cm:treatmentSpecialty)
ObjectPropertyRange(cm:treatmentSpecialty sn:SN_224930009)

# Object Property: cm:usesDevice (uses device)

AnnotationAssertion(rdfs:label cm:usesDevice "uses device")
SubObjectPropertyOf(cm:usesDevice owl:topObjectProperty)

# Object Property: cm:wasDerivedFrom (was derived from)

AnnotationAssertion(rdfs:comment cm:wasDerivedFrom "references a resource from which the resource or entry was transformed from")
AnnotationAssertion(rdfs:label cm:wasDerivedFrom "was derived from")

# Object Property: cm:wasGeneratedBy (was generated by)

AnnotationAssertion(rdfs:comment cm:wasGeneratedBy "An entity was generated by a provenance activity")
AnnotationAssertion(rdfs:label cm:wasGeneratedBy "was generated by")

# Object Property: cm:wasPerformedBy (was performed by)

AnnotationAssertion(rdfs:comment cm:wasPerformedBy "references the person or device that performed the activity,usually used in provvenance")
AnnotationAssertion(rdfs:label cm:wasPerformedBy "was performed by")

# Object Property: rm:aAndEDepartmentType (a&e department type)

AnnotationAssertion(rdfs:comment rm:aAndEDepartmentType "points to the type of a&e department")
AnnotationAssertion(rdfs:label rm:aAndEDepartmentType "a&e department type")
SubObjectPropertyOf(rm:aAndEDepartmentType cm:isRecordModelField)
FunctionalObjectProperty(rm:aAndEDepartmentType)
ObjectPropertyDomain(rm:aAndEDepartmentType cm:AandEAttendance)
ObjectPropertyRange(rm:aAndEDepartmentType cm:AccidentAndEmergencySetting)

# Object Property: rm:adminCategoryonAdmission (administrative category on admission)

AnnotationAssertion(rdfs:comment rm:adminCategoryonAdmission "points to the patient administrative category at time of admission")
AnnotationAssertion(rdfs:label rm:adminCategoryonAdmission "administrative category on admission")
SubObjectPropertyOf(rm:adminCategoryonAdmission cm:isRecordModelField)
ObjectPropertyRange(rm:adminCategoryonAdmission cm:AdminCategory)

# Object Property: rm:administrativePaymentCategory (administrative category)

AnnotationAssertion(rdfs:comment rm:administrativePaymentCategory "points to patient administrative category for payment purposes")
AnnotationAssertion(rdfs:label rm:administrativePaymentCategory "administrative category")
SubObjectPropertyOf(rm:administrativePaymentCategory cm:isRecordModelField)
FunctionalObjectProperty(rm:administrativePaymentCategory)
ObjectPropertyRange(rm:administrativePaymentCategory cm:AdminCategory)

# Object Property: rm:admissionPatientClassification (has admission classification of patient)

AnnotationAssertion(rdfs:comment rm:admissionPatientClassification "Points to the admissin classification of a patient e.g. elective day admission or non elective ordinay admission of maternity")
AnnotationAssertion(rdfs:label rm:admissionPatientClassification "has admission classification of patient")
SubObjectPropertyOf(rm:admissionPatientClassification cm:isRecordModelField)
FunctionalObjectProperty(rm:admissionPatientClassification)
ObjectPropertyRange(rm:admissionPatientClassification cm:AdmissionPatientClass)

# Object Property: rm:aeAttendanceSource (has a&e attendance source of)

AnnotationAssertion(rdfs:comment rm:aeAttendanceSource "points to the attendance source type for an a&E visit")
AnnotationAssertion(rdfs:label rm:aeAttendanceSource "has a&e attendance source of")
SubObjectPropertyOf(rm:aeAttendanceSource cm:isRecordModelField)
FunctionalObjectProperty(rm:aeAttendanceSource)
ObjectPropertyRange(rm:aeAttendanceSource sn:SN_999002991000000109)

# Object Property: rm:attendanceStatus (has attendance status)

AnnotationAssertion(rdfs:comment rm:attendanceStatus "points to whether the patient attended or not")
AnnotationAssertion(rdfs:label rm:attendanceStatus "has attendance status")
SubObjectPropertyOf(rm:attendanceStatus cm:isRecordModelField)
FunctionalObjectProperty(rm:attendanceStatus)
ObjectPropertyRange(rm:attendanceStatus cm:AEAttNotAtt0)

# Object Property: rm:hasAttendanceOutcome (has attendance outcome)

AnnotationAssertion(rdfs:comment rm:hasAttendanceOutcome "points to the outcome of the attendance")
AnnotationAssertion(rdfs:label rm:hasAttendanceOutcome "has attendance outcome")
SubObjectPropertyOf(rm:hasAttendanceOutcome cm:isRecordModelField)
FunctionalObjectProperty(rm:hasAttendanceOutcome)
ObjectPropertyRange(rm:hasAttendanceOutcome cm:AttOutcome0)

# Object Property: rm:hasOrganisationType (has organisation type)

AnnotationAssertion(rdfs:comment rm:hasOrganisationType "points to the type of organisation")
AnnotationAssertion(rdfs:label rm:hasOrganisationType "has organisation type")
SubObjectPropertyOf(rm:hasOrganisationType cm:isRecordModelField)
ObjectPropertyDomain(rm:hasOrganisationType rm:Organisation)
ObjectPropertyRange(rm:hasOrganisationType cm:OrganisationType)

# Object Property: rm:hasRole (has role)

AnnotationAssertion(rdfs:comment rm:hasRole "Entity can assume a number of roles e.g. a person has a role of a patient")
AnnotationAssertion(rdfs:label rm:hasRole "has role")
SubObjectPropertyOf(rm:hasRole cm:isRecordModelField)

# Object Property: sn:SN_370134009 (has time aspect)

AnnotationAssertion(rdfs:comment sn:SN_370134009 "points to a time period type such as night time or day time")
AnnotationAssertion(rdfs:label sn:SN_370134009 "has time aspect")
SubObjectPropertyOf(sn:SN_370134009 owl:topObjectProperty)

# Object Property: sn:SN_424226004 (using device)

AnnotationAssertion(rdfs:comment sn:SN_424226004 "a device used by a procedure or observation or encounter")
AnnotationAssertion(rdfs:label sn:SN_424226004 "using device")
SubObjectPropertyOf(sn:SN_424226004 owl:topObjectProperty)

# Object Property: owl:topObjectProperty (topObjectProperty)

AnnotationAssertion(rdfs:label owl:topObjectProperty "topObjectProperty")


############################
#   Data Properties
############################

# Data Property: cm:Code (Code)

AnnotationAssertion(rdfs:comment cm:Code "A text that is normally a code created for the purposes of categorising values")
AnnotationAssertion(rdfs:label cm:Code "Code")
SubDataPropertyOf(cm:Code cm:textProperty)

# Data Property: cm:booleanProperty (boolean property)

AnnotationAssertion(rdfs:comment cm:booleanProperty "A data property that has a true false value")
AnnotationAssertion(rdfs:label cm:booleanProperty "boolean property")
SubDataPropertyOf(cm:booleanProperty cm:isRecordModelDataField)

# Data Property: cm:codeProperty (code property)

AnnotationAssertion(rdfs:comment cm:codeProperty "A property that has a code as its value")
AnnotationAssertion(rdfs:label cm:codeProperty "code property")
SubDataPropertyOf(cm:codeProperty cm:isRecordModelDataField)

# Data Property: cm:dateTimeProperty (date time property)

AnnotationAssertion(rdfs:comment cm:dateTimeProperty "A data property that has a date and time as a value")
AnnotationAssertion(rdfs:label cm:dateTimeProperty "date time property")
SubDataPropertyOf(cm:dateTimeProperty cm:isRecordModelDataField)

# Data Property: cm:hasActivityTime (has activity time)

AnnotationAssertion(rdfs:comment cm:hasActivityTime "date and time of activity")
AnnotationAssertion(rdfs:label cm:hasActivityTime "has activity time")
SubDataPropertyOf(cm:hasActivityTime cm:dateTimeProperty)

# Data Property: cm:hasCode (has code)

AnnotationAssertion(rdfs:comment cm:hasCode "A code from an external taxonomy")
AnnotationAssertion(rdfs:label cm:hasCode "has code")
SubDataPropertyOf(cm:hasCode cm:codeProperty)

# Data Property: cm:hasCodePrefix (has code prefix)

AnnotationAssertion(rdfs:comment cm:hasCodePrefix "prefix for a code for a code scheme or model")
AnnotationAssertion(rdfs:label cm:hasCodePrefix "has code prefix")
SubDataPropertyOf(cm:hasCodePrefix cm:textProperty)

# Data Property: cm:hasComponentDate (has component date)

AnnotationAssertion(rdfs:comment cm:hasComponentDate "the date and time of the creation or update to the component")
AnnotationAssertion(rdfs:label cm:hasComponentDate "has component date")
SubDataPropertyOf(cm:hasComponentDate cm:dateTimeProperty)

# Data Property: cm:hasDateOfBirth (has date of birth)

AnnotationAssertion(rdfs:comment cm:hasDateOfBirth "Date of birth of person")
AnnotationAssertion(rdfs:label cm:hasDateOfBirth "has date of birth")
SubDataPropertyOf(cm:hasDateOfBirth cm:dateTimeProperty)

# Data Property: cm:hasDateTimeOfEntry (has Date and time of entry)

AnnotationAssertion(rdfs:comment cm:hasDateTimeOfEntry "A date and time a particular entry or component was made (local time)")
AnnotationAssertion(rdfs:label cm:hasDateTimeOfEntry "has Date and time of entry")
SubDataPropertyOf(cm:hasDateTimeOfEntry cm:dateTimeProperty)

# Data Property: cm:hasEffectiveDate (start date/time)

AnnotationAssertion(rdfs:comment cm:hasEffectiveDate "The effective start date and time relevant to the event being described (and not related to the entry date into the system)")
AnnotationAssertion(rdfs:label cm:hasEffectiveDate "start date/time")
SubDataPropertyOf(cm:hasEffectiveDate cm:dateTimeProperty)
DataPropertyRange(cm:hasEffectiveDate cm:DateTime)

# Data Property: cm:hasEndTime (end date/time)

AnnotationAssertion(rdfs:comment cm:hasEndTime "the effective end date/time relevant to the event being described")
AnnotationAssertion(rdfs:label cm:hasEndTime "end date/time")
SubDataPropertyOf(cm:hasEndTime cm:dateTimeProperty)
DataPropertyRange(cm:hasEndTime cm:DateTime)

# Data Property: cm:hasHeading (has heading)

AnnotationAssertion(rdfs:comment cm:hasHeading "points to the heading for this section")
AnnotationAssertion(rdfs:label cm:hasHeading "has heading")
SubDataPropertyOf(cm:hasHeading cm:textProperty)

# Data Property: cm:hasIdentifierScheme (has identifier scheme)

AnnotationAssertion(rdfs:comment cm:hasIdentifierScheme "points to the url for the identifer scheme of the entity (e.g. nhs number)")
AnnotationAssertion(rdfs:label cm:hasIdentifierScheme "has identifier scheme")
SubDataPropertyOf(cm:hasIdentifierScheme cm:textProperty)
FunctionalDataProperty(cm:hasIdentifierScheme)

# Data Property: cm:hasIdentifierValue (has identifier value)

AnnotationAssertion(rdfs:comment cm:hasIdentifierValue "points to the value of an identifier")
AnnotationAssertion(rdfs:label cm:hasIdentifierValue "has identifier value")
SubDataPropertyOf(cm:hasIdentifierValue cm:textProperty)
FunctionalDataProperty(cm:hasIdentifierValue)

# Data Property: cm:hasOdsCode (has ods code)

AnnotationAssertion(rdfs:comment cm:hasOdsCode "a code for an organisation or person within the NHS social care sector")
AnnotationAssertion(rdfs:label cm:hasOdsCode "has ods code")
SubDataPropertyOf(cm:hasOdsCode cm:codeProperty)

# Data Property: cm:hasReportIdentifier (has report identifier)

AnnotationAssertion(rdfs:comment cm:hasReportIdentifier "the identifier of the report")
AnnotationAssertion(rdfs:label cm:hasReportIdentifier "has report identifier")
SubDataPropertyOf(cm:hasReportIdentifier cm:textProperty)

# Data Property: cm:hasReportName (has report name)

AnnotationAssertion(rdfs:comment cm:hasReportName "a name of a report")
AnnotationAssertion(rdfs:label cm:hasReportName "has report name")
SubDataPropertyOf(cm:hasReportName cm:textProperty)

# Data Property: cm:hasResourceLocation (has resource Location)

AnnotationAssertion(rdfs:comment cm:hasResourceLocation "the location (implementation specific identifier) for a location e.g UUID or domain URI etc")
AnnotationAssertion(rdfs:label cm:hasResourceLocation "has resource Location")
SubDataPropertyOf(cm:hasResourceLocation cm:textProperty)

# Data Property: cm:hasTermForClient (has term for client)

AnnotationAssertion(rdfs:comment cm:hasTermForClient "The organisations term for a client")
AnnotationAssertion(rdfs:label cm:hasTermForClient "has term for client")
SubDataPropertyOf(cm:hasTermForClient cm:textProperty)

# Data Property: cm:hasTransactionNumber (has transaction number)

AnnotationAssertion(rdfs:comment cm:hasTransactionNumber "An incremental integer for a transaction of some kind")
AnnotationAssertion(rdfs:label cm:hasTransactionNumber "has transaction number")
SubDataPropertyOf(cm:hasTransactionNumber cm:integerProperty)

# Data Property: cm:hasUpdateTime (has update time)

AnnotationAssertion(rdfs:comment cm:hasUpdateTime "date and time of the update")
AnnotationAssertion(rdfs:label cm:hasUpdateTime "has update time")
SubDataPropertyOf(cm:hasUpdateTime cm:dateTimeProperty)

# Data Property: cm:id (id)

AnnotationAssertion(rdfs:comment cm:id "A logical entity id usually an integer or uuid")
AnnotationAssertion(rdfs:label cm:id "id")
SubDataPropertyOf(cm:id owl:topDataProperty)

# Data Property: cm:integerProperty (integer property)

AnnotationAssertion(rdfs:comment cm:integerProperty "A property that has an integer value")
AnnotationAssertion(rdfs:label cm:integerProperty "integer property")
SubDataPropertyOf(cm:integerProperty cm:numericProperty)

# Data Property: cm:isRecordModelDataField (is dm data property)

AnnotationAssertion(rdfs:comment cm:isRecordModelDataField "indicates that this property would be expected to be implmented as a field in a database or attribute within the data store, as opposed to a definitional property in the knowledge base. It has a simple data type as a value")
AnnotationAssertion(rdfs:label cm:isRecordModelDataField "is dm data property")
SubDataPropertyOf(cm:isRecordModelDataField owl:topDataProperty)
FunctionalDataProperty(cm:isRecordModelDataField)

# Data Property: cm:isRecordModelEntity (is data model entity)

AnnotationAssertion(rdfs:comment cm:isRecordModelEntity "a significant property, that indicates that the objects of the class would be instantiated as entities within the record database as opposed to the knowledge base e.g. a table or resource or table+ type field.")
AnnotationAssertion(rdfs:label cm:isRecordModelEntity "is data model entity")
SubDataPropertyOf(cm:isRecordModelEntity owl:topDataProperty)
DataPropertyRange(cm:isRecordModelEntity xsd:boolean)

# Data Property: cm:numericProperty (numeric property)

AnnotationAssertion(rdfs:comment cm:numericProperty "A data property that has a floating point value")
AnnotationAssertion(rdfs:label cm:numericProperty "numeric property")
SubDataPropertyOf(cm:numericProperty cm:isRecordModelDataField)

# Data Property: cm:textProperty (text property)

AnnotationAssertion(rdfs:comment cm:textProperty "A data property that has a text value")
AnnotationAssertion(rdfs:label cm:textProperty "text property")
SubDataPropertyOf(cm:textProperty cm:isRecordModelDataField)
DataPropertyRange(cm:textProperty xsd:string)


############################
#   Datatypes
############################

# Datatype: cm:DateTime (cm:DateTime)

DatatypeDefinition(cm:DateTime DatatypeRestriction(xsd:string xsd:pattern "[0-9]{4}-[0-9]{2}-[0-9]{2}"))


############################
#   Classes
############################

# Class: arc:AandE (Accident and emergency (encounter record))

AnnotationAssertion(rdfs:comment arc:AandE "Extended properties for encounter of type accident and emergency")
AnnotationAssertion(rdfs:label arc:AandE "Accident and emergency (encounter record)")
EquivalentClasses(arc:AandE ObjectIntersectionOf(rm:EncounterRecord ObjectExactCardinality(1 cm:hasEncounterType cm:AandEAttendance) ObjectMaxCardinality(1 cm:aeAttendanceCategory cm:AEAttendanceCat) ObjectMaxCardinality(1 cm:arrivalMode sn:SN_999002981000000107) ObjectMaxCardinality(1 cm:treatmentFunctionAdmit sn:SN_224930009) ObjectMaxCardinality(1 rm:aAndEDepartmentType cm:AccidentAndEmergencySetting) ObjectMaxCardinality(1 rm:aeAttendanceSource sn:SN_999002991000000109)))

# Class: arc:HospitalAdmission (Hospital admission (encounter record))

AnnotationAssertion(rdfs:comment arc:HospitalAdmission "Extended properties for encounter of type hospital admission")
AnnotationAssertion(rdfs:label arc:HospitalAdmission "Hospital admission (encounter record)")
EquivalentClasses(arc:HospitalAdmission ObjectIntersectionOf(rm:EncounterRecord ObjectExactCardinality(1 cm:hasEncounterType cm:HospitalAdmissionEncounter) ObjectMaxCardinality(1 cm:methodOfAdmssion cm:AdmissionMethod) ObjectMaxCardinality(1 cm:sourceOfAdmission cm:AdmissionSource) ObjectMaxCardinality(1 rm:adminCategoryonAdmission cm:AdminCategory)))

# Class: arc:HospitalDischarge (Hospital discharge (encounter record))

AnnotationAssertion(rdfs:comment arc:HospitalDischarge "Extended properties for encounter of type hospital discharge")
AnnotationAssertion(rdfs:label arc:HospitalDischarge "Hospital discharge (encounter record)")
EquivalentClasses(arc:HospitalDischarge ObjectIntersectionOf(rm:EncounterRecord ObjectExactCardinality(1 cm:hasEncounterType cm:HospitalDischargeEncounter) ObjectMaxCardinality(1 cm:hasDischargeDestination cm:DisDest0) ObjectMaxCardinality(1 cm:hasDischargeMethod cm:DisMethod0)))

# Class: arc:HospitalOutpatient (Hospital outpatient (encounter record))

AnnotationAssertion(rdfs:comment arc:HospitalOutpatient "Extended properties for an encounter with type of hospital outpatient")
AnnotationAssertion(rdfs:label arc:HospitalOutpatient "Hospital outpatient (encounter record)")
EquivalentClasses(arc:HospitalOutpatient ObjectIntersectionOf(rm:EncounterRecord ObjectExactCardinality(1 cm:hasEncounterType cm:HospOpdEncounter) ObjectMaxCardinality(1 cm:treatmentSpecialty sn:SN_224930009) ObjectMaxCardinality(1 rm:administrativePaymentCategory cm:AdminCategory) ObjectMaxCardinality(1 rm:attendanceStatus cm:AEAttNotAtt0) ObjectMaxCardinality(1 rm:hasAttendanceOutcome cm:AttOutcome0)))

# Class: arc:NHSPatient (NHS Patient (demographic record))

AnnotationAssertion(rdfs:comment arc:NHSPatient "Extended properties and value constraints for NHS patients including the definition of the type of identifier (NHS number)")
AnnotationAssertion(rdfs:label arc:NHSPatient "NHS Patient (demographic record)")
EquivalentClasses(arc:NHSPatient ObjectIntersectionOf(rm:Person ObjectExactCardinality(1 cm:hasDataController rm:NHSOrganisation) ObjectExactCardinality(1 cm:hasIdentifier ObjectIntersectionOf(rm:Identifier DataHasValue(cm:hasIdentifierScheme "https://fhir.nhs.uk/Id/nhs-number"))) ObjectExactCardinality(1 cm:hasPersonRole cm:NHSPatient)))

# Class: cm:AEAttCat1 (First Accident and Emergency Attendance  in episode)

AnnotationAssertion(rdfs:comment cm:AEAttCat1 "First Accident and Emergency Attendance - the first in a series, or the only attendance, in a particular Accident and Emergency Episode CDS 1")
AnnotationAssertion(rdfs:label cm:AEAttCat1 "First Accident and Emergency Attendance  in episode")
SubClassOf(cm:AEAttCat1 cm:AEAttendanceCat)

# Class: cm:AEAttCat2 (Subsequent planned A&E attendance at same department, and incident)

AnnotationAssertion(rdfs:comment cm:AEAttCat2 "Follow-up Accident and Emergency Attendance - planned: a subsequent planned attendance at the same department, and for the same incident as the first attendance CDS 2")
AnnotationAssertion(rdfs:label cm:AEAttCat2 "Subsequent planned A&E attendance at same department, and incident")
SubClassOf(cm:AEAttCat2 cm:AEAttendanceCat)

# Class: cm:AEAttCat3 (Subsequent unplanned A&E attendance at the same department and incident)

AnnotationAssertion(rdfs:comment cm:AEAttCat3 "Follow-up Accident and Emergency Attendance - unplanned: a subsequent unplanned attendance at the same department, and for the same incident as the first attendance CDS 3")
AnnotationAssertion(rdfs:label cm:AEAttCat3 "Subsequent unplanned A&E attendance at the same department and incident")
SubClassOf(cm:AEAttCat3 cm:AEAttendanceCat)

# Class: cm:AEAttNotAtt0 (Attended or not attended)

AnnotationAssertion(rdfs:comment cm:AEAttNotAtt0 "An indication of whether an APPOINTMENT for a CARE CONTACT took place.")
AnnotationAssertion(rdfs:label cm:AEAttNotAtt0 "Attended or not attended")
SubClassOf(cm:AEAttNotAtt0 cm:CareAdministration)

# Class: cm:AEAttendanceCat (Accident and emergency attendance or follow up)

AnnotationAssertion(rdfs:comment cm:AEAttendanceCat "Indicates whether the A&E attendance is first or a follow up")
AnnotationAssertion(rdfs:label cm:AEAttendanceCat "Accident and emergency attendance or follow up")
SubClassOf(cm:AEAttendanceCat cm:CareAdministration)

# Class: cm:AEDepType1 (Consultant led A&E department with full facilities (department type))

AnnotationAssertion(rdfs:comment cm:AEDepType1 "Emergency departments are a CONSULTANT led 24 hour service with full resuscitation facilities and designated accommodation for the reception of accident and emergency PATIENTS CDS type 1")
AnnotationAssertion(rdfs:label cm:AEDepType1 "Consultant led A&E department with full facilities (department type)")
SubClassOf(cm:AEDepType1 cm:AccidentAndEmergencySetting)

# Class: cm:AEDepType2 (Mono speciality A&E (department type))

AnnotationAssertion(rdfs:comment cm:AEDepType2 "Consultant led mono specialty accident and emergency service (e.g. ophthalmology, dental) with designated accommodation for the reception of PATIENTS CDS 2")
AnnotationAssertion(rdfs:label cm:AEDepType2 "Mono speciality A&E (department type)")
SubClassOf(cm:AEDepType2 cm:AccidentAndEmergencySetting)

# Class: cm:AEDepType3 (Minor injuries unit either Doctor or Nurse led (department type))

AnnotationAssertion(rdfs:comment cm:AEDepType3 "Other type of A&E/minor injury ACTIVITY with designated accommodation for the reception of accident and emergency PATIENTS. The department may be doctor led or NURSE led and treats at least minor injuries and illnesses and can be routinely accessed without APPOINTMENT. A SERVICE mainly or entirely APPOINTMENT based (for example a GP Practice or Out-Patient Clinic) is excluded even though it may treat a number of PATIENTS with minor illness or injury. Excludes NHS walk-in centres CDS 3")
AnnotationAssertion(rdfs:label cm:AEDepType3 "Minor injuries unit either Doctor or Nurse led (department type)")
SubClassOf(cm:AEDepType3 cm:AccidentAndEmergencySetting)

# Class: cm:AEDepType4 (NHS Walk in centre)

AnnotationAssertion(rdfs:comment cm:AEDepType4 "NHS walk in centres CDS 4")
AnnotationAssertion(rdfs:label cm:AEDepType4 "NHS Walk in centre")
SubClassOf(cm:AEDepType4 cm:oohwuc)

# Class: cm:AandEAttendance (Accident and emergency encounter)

AnnotationAssertion(rdfs:comment cm:AandEAttendance "An encounter that takes place in accident and emergency")
AnnotationAssertion(rdfs:label cm:AandEAttendance "Accident and emergency encounter")
EquivalentClasses(cm:AandEAttendance ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:AccidentAndEmergencySetting)))

# Class: cm:AccidentAndEmergencySetting (Accident and emergency (setting))

AnnotationAssertion(rdfs:comment cm:AccidentAndEmergencySetting "An A&E department or equivalent setting")
AnnotationAssertion(rdfs:label cm:AccidentAndEmergencySetting "Accident and emergency (setting)")
SubClassOf(cm:AccidentAndEmergencySetting cm:Hospital)

# Class: cm:ActiveInactive (Active or Inactive status)

AnnotationAssertion(rdfs:comment cm:ActiveInactive "A status that is in active or active")
AnnotationAssertion(rdfs:label cm:ActiveInactive "Active or Inactive status")
SubClassOf(cm:ActiveInactive cm:ModelComponentStatus)

# Class: cm:ActiveStatus (Active status)

AnnotationAssertion(rdfs:comment cm:ActiveStatus "The active-inactive status value is active")
AnnotationAssertion(rdfs:label cm:ActiveStatus "Active status")
SubClassOf(cm:ActiveStatus cm:ActiveInactive)

# Class: cm:AdmBabyRelated (Baby related admission (admission method))

AnnotationAssertion(rdfs:comment cm:AdmBabyRelated "Admission method relating to the admission of the baby i.e. the baby is the subject of the admission")
AnnotationAssertion(rdfs:label cm:AdmBabyRelated "Baby related admission (admission method)")
SubClassOf(cm:AdmBabyRelated cm:AdmissionMethod)

# Class: cm:AdmClassDayCase (Day case admission)

AnnotationAssertion(rdfs:comment cm:AdmClassDayCase "A PATIENT admitted electively during the course of a day with the intention of receiving care who does not require the use of a Hospital Bed  overnight and who returns home as scheduled. If this original intention is not fulfilled and the PATIENT stays overnight, such a PATIENT should be counted as an ordinary admission CDS type 2")
AnnotationAssertion(rdfs:label cm:AdmClassDayCase "Day case admission")
SubClassOf(cm:AdmClassDayCase cm:AdmissionPatientClass)

# Class: cm:AdmClassMotherBabyDelivery (Mother and baby using delivery facilities only)

AnnotationAssertion(rdfs:comment cm:AdmClassMotherBabyDelivery "Mother and baby using Delivery facilities only and not using a Hospital Bed in the Antenatal or Postnatal WARDS during the stay in hospital")
AnnotationAssertion(rdfs:label cm:AdmClassMotherBabyDelivery "Mother and baby using delivery facilities only")
SubClassOf(cm:AdmClassMotherBabyDelivery cm:AdmissionPatientClass)

# Class: cm:AdmClassOrdinary (Ordinary non elective admission)

AnnotationAssertion(rdfs:comment cm:AdmClassOrdinary "A PATIENT not admitted electively, and any PATIENT admitted electively with the expectation that they will remain in hospital for at least one night, including a PATIENT admitted with this intention who leaves hospital for any reason without staying overnight. A PATIENT admitted electively with the intent of not staying overnight, but who does not return home as scheduled, should be counted as an ordinary admission")
AnnotationAssertion(rdfs:label cm:AdmClassOrdinary "Ordinary non elective admission")
SubClassOf(cm:AdmClassOrdinary cm:AdmissionPatientClass)

# Class: cm:AdmClassRegularDay (Regular elective day admission)

AnnotationAssertion(rdfs:comment cm:AdmClassRegularDay "A PATIENT admitted electively during the day, as part of a planned series of regular admissions for an on-going regime of broadly similar treatment and who is discharged the same day. If the intention is not fulfilled and one of these admissions should involve a stay of at least 24 hours, such an admission should be classified as an ordinary admission. The series of regular admissions ends when the PATIENT no longer requires frequent admissions")
AnnotationAssertion(rdfs:label cm:AdmClassRegularDay "Regular elective day admission")
SubClassOf(cm:AdmClassRegularDay cm:AdmissionPatientClass)

# Class: cm:AdmClassRegularNight (Regular elective night admission)

AnnotationAssertion(rdfs:comment cm:AdmClassRegularNight "A PATIENT admitted electively for the night, as part of a planned series of regular admissions for an on-going regime of broadly similar treatment and who is discharged in the morning. If the intention is not fulfilled and one of these admissions should involve a stay of at least 24 hours, such an admission should be classified as an ordinary admission. The series of regular admissions ends when the patient no longer requires frequent admissions")
AnnotationAssertion(rdfs:label cm:AdmClassRegularNight "Regular elective night admission")
SubClassOf(cm:AdmClassRegularNight cm:AdmissionPatientClass)

# Class: cm:AdmElectiveEncounter (Elective admission)

AnnotationAssertion(rdfs:comment cm:AdmElectiveEncounter "Record of an elective admission from waiting list planned or booked")
AnnotationAssertion(rdfs:label cm:AdmElectiveEncounter "Elective admission")
EquivalentClasses(cm:AdmElectiveEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:isProcess cm:Admission) ObjectExactCardinality(1 cm:methodOfAdmssion cm:AdmMetElective)))

# Class: cm:AdmMetBBhok (Emergency admission after baby born at home as intended)

AnnotationAssertion(rdfs:comment cm:AdmMetBBhok "Emergency admssion after Baby born at home as intended CDS type 2C")
AnnotationAssertion(rdfs:label cm:AdmMetBBhok "Emergency admission after baby born at home as intended")
SubClassOf(cm:AdmMetBBhok cm:AdmMetEmergency)

# Class: cm:AdmMetBedBureau (Emergency admission via bed bureau)

AnnotationAssertion(rdfs:comment cm:AdmMetBedBureau "after a request for immediate admission has been made direct to a Hospital Provider from a bed bureau - CDS type 23")
AnnotationAssertion(rdfs:label cm:AdmMetBedBureau "Emergency admission via bed bureau")
SubClassOf(cm:AdmMetBedBureau cm:AdmMetEmergency)

# Class: cm:AdmMetBirthHere (Birth of a baby in this Health Care Provider)

AnnotationAssertion(rdfs:comment cm:AdmMetBirthHere "Birth of a baby in this Health Care Provider CDS type 82")
AnnotationAssertion(rdfs:label cm:AdmMetBirthHere "Birth of a baby in this Health Care Provider")
SubClassOf(cm:AdmMetBirthHere cm:AdmBabyRelated)
DisjointClasses(cm:AdmMetBirthHere cm:AdmMetBirthOut)

# Class: cm:AdmMetBirthOut (Baby born outside the Health Care Provider except when born at home as intended)

AnnotationAssertion(rdfs:comment cm:AdmMetBirthOut "Baby born outside the Health Care Provider except when born at home as intended type 83")
AnnotationAssertion(rdfs:label cm:AdmMetBirthOut "Baby born outside the Health Care Provider except when born at home as intended")
SubClassOf(cm:AdmMetBirthOut cm:AdmBabyRelated)

# Class: cm:AdmMetBooked (Booked admission (admssion method))

AnnotationAssertion(rdfs:comment cm:AdmMetBooked "Elective booked admission CDS type 12")
AnnotationAssertion(rdfs:label cm:AdmMetBooked "Booked admission (admssion method)")
SubClassOf(cm:AdmMetBooked cm:AdmMetElective)

# Class: cm:AdmMetCasElsewhere (Emergency admission from A&E  from another provider)

AnnotationAssertion(rdfs:comment cm:AdmMetCasElsewhere "Emergency admission from Accident and Emergency Department of another provider where the PATIENT had not been admitted CDS type 2A")
AnnotationAssertion(rdfs:label cm:AdmMetCasElsewhere "Emergency admission from A&E  from another provider")
SubClassOf(cm:AdmMetCasElsewhere cm:AdmMetEmergency)

# Class: cm:AdmMetCasSame (cm:AdmMetCasSame)

SubClassOf(cm:AdmMetCasSame cm:AdmMetEmergency)

# Class: cm:AdmMetConClin (Emergency admission from consultant clinic)

AnnotationAssertion(rdfs:comment cm:AdmMetConClin "Emergency admission from Consultant Clinic, of this or another Health Care Provider - CDS type 24")
AnnotationAssertion(rdfs:label cm:AdmMetConClin "Emergency admission from consultant clinic")
SubClassOf(cm:AdmMetConClin cm:AdmMetEmergency)

# Class: cm:AdmMetEMore (Emergency admission via other or none specific means)

AnnotationAssertion(rdfs:comment cm:AdmMetEMore "Emergencey admission - Other emergency admission CDS type 2D replacing  CDS type 28 also")
AnnotationAssertion(rdfs:label cm:AdmMetEMore "Emergency admission via other or none specific means")
SubClassOf(cm:AdmMetEMore cm:AdmMetEmergency)

# Class: cm:AdmMetElective (cm:AdmMetElective)

SubClassOf(cm:AdmMetElective cm:AdmissionMethod)

# Class: cm:AdmMetEmergency (Emergency admission (admission method))

AnnotationAssertion(rdfs:comment cm:AdmMetEmergency "Emergency Admission, when admission is unpredictable and at short notice because of clinical need")
AnnotationAssertion(rdfs:label cm:AdmMetEmergency "Emergency admission (admission method)")
SubClassOf(cm:AdmMetEmergency cm:AdmissionMethod)

# Class: cm:AdmMetGpDirect (Emergency admission direct from GP)

AnnotationAssertion(rdfs:comment cm:AdmMetGpDirect "Emergency admission via GENERAL PRACTITIONER: after a request for immediate admission has been made direct to a Hospital Provider, i.e. not through a Bed bureau, by a GENERAL PRACTITIONER or deputy - CDS type 22")
AnnotationAssertion(rdfs:label cm:AdmMetGpDirect "Emergency admission direct from GP")
SubClassOf(cm:AdmMetGpDirect cm:AdmMetEmergency)

# Class: cm:AdmMetHosTran (Emergency admission - transfer of admitted patient from another hospital)

AnnotationAssertion(rdfs:comment cm:AdmMetHosTran "Emergency admission - Transfer of an admitted PATIENT from another Hospital Provider in an emergency - CDS type 2B")
AnnotationAssertion(rdfs:label cm:AdmMetHosTran "Emergency admission - transfer of admitted patient from another hospital")
SubClassOf(cm:AdmMetHosTran cm:AdmMetEmergency)

# Class: cm:AdmMetMatAP (Maternity admission ante partum)

AnnotationAssertion(rdfs:comment cm:AdmMetMatAP "Maternit admission antepartum CDS type 31")
AnnotationAssertion(rdfs:label cm:AdmMetMatAP "Maternity admission ante partum")
SubClassOf(cm:AdmMetMatAP cm:AdmMetMaternity)
DisjointClasses(cm:AdmMetMatAP cm:AdmMetMatPP)

# Class: cm:AdmMetMatPP (Maternity admission post partum)

AnnotationAssertion(rdfs:comment cm:AdmMetMatPP "Maternity admission post partum CDS type 32")
AnnotationAssertion(rdfs:label cm:AdmMetMatPP "Maternity admission post partum")
SubClassOf(cm:AdmMetMatPP cm:AdmMetMaternity)

# Class: cm:AdmMetMaternity (Maternity Admission, of a pregnant or recently pregnant woman)

AnnotationAssertion(rdfs:comment cm:AdmMetMaternity "Maternity Admission, of a pregnant or recently pregnant woman to a maternity WARD (including Delivery facilities) except when the intention is to terminate the pregnancy")
AnnotationAssertion(rdfs:label cm:AdmMetMaternity "Maternity Admission, of a pregnant or recently pregnant woman")
SubClassOf(cm:AdmMetMaternity cm:AdmissionMethod)

# Class: cm:AdmMetMheCrisis (Emergency admission via mental health crisis resolution team)

AnnotationAssertion(rdfs:comment cm:AdmMetMheCrisis "Admission via Mental Health Crisis Resolution Team CDS type 25")
AnnotationAssertion(rdfs:label cm:AdmMetMheCrisis "Emergency admission via mental health crisis resolution team")
SubClassOf(cm:AdmMetMheCrisis cm:AdmMetEmergency)

# Class: cm:AdmMetPlanned (Planned admission (admission method))

AnnotationAssertion(rdfs:comment cm:AdmMetPlanned "Planned admission - CDS type 13")
AnnotationAssertion(rdfs:label cm:AdmMetPlanned "Planned admission (admission method)")
SubClassOf(cm:AdmMetPlanned cm:AdmMetElective)

# Class: cm:AdmMethWa (Waiting list (admission method))

AnnotationAssertion(rdfs:comment cm:AdmMethWa "Method of actual admission was electively from the waiting list CDS type 11")
AnnotationAssertion(rdfs:label cm:AdmMethWa "Waiting list (admission method)")
SubClassOf(cm:AdmMethWa cm:AdmMetElective)

# Class: cm:AdmNonETransfer (Non emergency transfer from other provider)

AnnotationAssertion(rdfs:comment cm:AdmNonETransfer "Transfer of any admitted PATIENT from other Hospital Provider other than in an emergency cds TYPE 81")
AnnotationAssertion(rdfs:label cm:AdmNonETransfer "Non emergency transfer from other provider")
SubClassOf(cm:AdmNonETransfer cm:AdmissionMethod)

# Class: cm:AdminCat01 (NHS PATIENT/ Overseas Visitor charged under NHS)

AnnotationAssertion(rdfs:comment cm:AdminCat01 "NHS PATIENT, including Overseas Visitors charged under the National Health Service (Overseas Visitors Hospital Charging Regulations) CDS 01")
AnnotationAssertion(rdfs:label cm:AdminCat01 "NHS PATIENT/ Overseas Visitor charged under NHS")
SubClassOf(cm:AdminCat01 cm:AdminCategory)

# Class: cm:AdminCat02 (Private PATIENTusing accommodation/service authorised under the NHS)

AnnotationAssertion(rdfs:comment cm:AdminCat02 "Private PATIENT, one who uses accommodation or SERVICES authorised under the National Health Service Act 2006 cds 02")
AnnotationAssertion(rdfs:label cm:AdminCat02 "Private PATIENTusing accommodation/service authorised under the NHS")
SubClassOf(cm:AdminCat02 cm:AdminCategory)

# Class: cm:AdminCat03 (Amenity PATIENT,use of NHS single room / small ward)

AnnotationAssertion(rdfs:comment cm:AdminCat03 "Amenity PATIENT, one who pays for the use of a single room or small ward in accordance with the National Health Service Act 2006 cds 03")
AnnotationAssertion(rdfs:label cm:AdminCat03 "Amenity PATIENT,use of NHS single room / small ward")
SubClassOf(cm:AdminCat03 cm:AdminCategory)

# Class: cm:AdminCat04 (Category II PATIENT)

AnnotationAssertion(rdfs:comment cm:AdminCat04 "Category II PATIENT, one for whom work is undertaken by hospital medical or dental staff within category II as defined in paragraph 37 of the Terms and Conditions of Service of Hospital Medical and Dental Staff 04")
AnnotationAssertion(rdfs:label cm:AdminCat04 "Category II PATIENT")
SubClassOf(cm:AdminCat04 cm:AdminCategory)

# Class: cm:AdminCategory (Patient administrative category for payment purposes)

AnnotationAssertion(rdfs:comment cm:AdminCategory "This is recorded for PATIENT ACTIVITY.

A PATIENT who is an Overseas Visitor does not qualify for free NHS healthcare and can choose to pay for NHS treatment or for private treatment. If they pay for NHS treatment then they should be recorded as NHS PATIENTS.

The PATIENT's ADMINISTRATIVE CATEGORY CODE may change during an episode or spell. For example, the PATIENT may opt to change from NHS to private health care. In this case, the start and end dates for each new ADMINISTRATIVE CATEGORY PERIOD (episode or spell) should be recorded.

If the ADMINISTRATIVE CATEGORY CODE changes during a Hospital Provider Spell the ADMINISTRATIVE CATEGORY CODE (ON ADMISSION) is used to derive the 'Category of PATIENT' for Hospital Episode Statistics (HES).

The category 'amenity PATIENT' is only applicable to PATIENTS using a Hospital Bed.")
AnnotationAssertion(rdfs:label cm:AdminCategory "Patient administrative category for payment purposes")
SubClassOf(cm:AdminCategory cm:CareAdministration)

# Class: cm:AdministrationFiling (Administration activity)

AnnotationAssertion(rdfs:comment cm:AdministrationFiling "An interaction involving some admin task")
AnnotationAssertion(rdfs:label cm:AdministrationFiling "Administration activity")
SubClassOf(cm:AdministrationFiling cm:CareAdministration)

# Class: cm:AdministrativeEntry (Administrative entry)

AnnotationAssertion(rdfs:comment cm:AdministrativeEntry "A type of encounter involving any admin entry into the records such as a filing of a report or note about the patient that defines the type of encounter entered into the health record")
AnnotationAssertion(rdfs:label cm:AdministrativeEntry "Administrative entry")
EquivalentClasses(cm:AdministrativeEntry ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:hasActivityType cm:AdministrationFiling)))

# Class: cm:Admission (Admission (care administration))

AnnotationAssertion(rdfs:comment cm:Admission "The care process of admission")
AnnotationAssertion(rdfs:label cm:Admission "Admission (care administration)")
SubClassOf(cm:Admission cm:CareAdministration)

# Class: cm:AdmissionMethod (Admission method)

AnnotationAssertion(rdfs:comment cm:AdmissionMethod "The method of admission to a Hospital Provider as authored by the NHS Data dictionary")
AnnotationAssertion(rdfs:label cm:AdmissionMethod "Admission method")
SubClassOf(cm:AdmissionMethod cm:CareAdministration)

# Class: cm:AdmissionPatientClass (Admission classification of patient)

AnnotationAssertion(rdfs:comment cm:AdmissionPatientClass "A classification of PATIENTS who have been admitted to a Hospital Provider Spell CDS 1-5")
AnnotationAssertion(rdfs:label cm:AdmissionPatientClass "Admission classification of patient")
SubClassOf(cm:AdmissionPatientClass cm:CareAdministration)

# Class: cm:AdmissionSource (Source of admission)

AnnotationAssertion(rdfs:comment cm:AdmissionSource "The source of admission to a Hospital Provider Spell or a Nursing Episode when the PATIENT is in a Hospital Site or a Care Home.")
AnnotationAssertion(rdfs:label cm:AdmissionSource "Source of admission")
SubClassOf(cm:AdmissionSource cm:CareAdministration)

# Class: cm:AttNotAtt00 (Not applicable - appointment occurs in the future)

AnnotationAssertion(rdfs:comment cm:AttNotAtt00 "Not applicable - APPOINTMENT occurs in the future CDS 0")
AnnotationAssertion(rdfs:label cm:AttNotAtt00 "Not applicable - appointment occurs in the future")
SubClassOf(cm:AttNotAtt00 cm:AttNotAttNot)

# Class: cm:AttNotAtt2 (Cancelled by, or on behalf of, the patient)

AnnotationAssertion(rdfs:comment cm:AttNotAtt2 "APPOINTMENT cancelled by, or on behalf of, the PATIENT CDS 2")
AnnotationAssertion(rdfs:label cm:AttNotAtt2 "Cancelled by, or on behalf of, the patient")
SubClassOf(cm:AttNotAtt2 cm:AttNotAttNot)

# Class: cm:AttNotAtt5 (Attended on time or before the professional was ready to see the patient)

AnnotationAssertion(rdfs:comment cm:AttNotAtt5 "Attended on time or, if late, before the relevant CARE PROFESSIONAL was ready to see the PATIENT CDS 5")
AnnotationAssertion(rdfs:label cm:AttNotAtt5 "Attended on time or before the professional was ready to see the patient")
SubClassOf(cm:AttNotAtt5 cm:AttNotAttAtt)

# Class: cm:AttNotAtt6 (Arrived late, after the professional was ready to see the patient, but was seen)

AnnotationAssertion(rdfs:comment cm:AttNotAtt6 "Arrived late, after the relevant CARE PROFESSIONAL was ready to see the PATIENT, but was seen CDS 6")
AnnotationAssertion(rdfs:label cm:AttNotAtt6 "Arrived late, after the professional was ready to see the patient, but was seen")
SubClassOf(cm:AttNotAtt6 cm:AttNotAttAtt)

# Class: cm:AttNotAtt7 (Arrived late and could not be seen)

AnnotationAssertion(rdfs:comment cm:AttNotAtt7 "PATIENT arrived late and could not be seen CDS 7")
AnnotationAssertion(rdfs:label cm:AttNotAtt7 "Arrived late and could not be seen")
SubClassOf(cm:AttNotAtt7 cm:AttNotAttNot)

# Class: cm:AttNotAttAtt (Attended and seen)

AnnotationAssertion(rdfs:comment cm:AttNotAttAtt "Inidicates that an attendance took place")
AnnotationAssertion(rdfs:label cm:AttNotAttAtt "Attended and seen")
SubClassOf(cm:AttNotAttAtt cm:AEAttNotAtt0)
DisjointClasses(cm:AttNotAttAtt cm:AttNotAttNot)

# Class: cm:AttNotAttNot (Not attended or not seen)

AnnotationAssertion(rdfs:comment cm:AttNotAttNot "Indicates that the patient did not attend for a number of reasons")
AnnotationAssertion(rdfs:label cm:AttNotAttNot "Not attended or not seen")
SubClassOf(cm:AttNotAttNot cm:AEAttNotAtt0)

# Class: cm:AttOpd1 (Discharged from care - last attendance)

AnnotationAssertion(rdfs:comment cm:AttOpd1 "Discharged from CONSULTANT's care (last attendance) CDS 1")
AnnotationAssertion(rdfs:label cm:AttOpd1 "Discharged from care - last attendance")
SubClassOf(cm:AttOpd1 cm:AttOutcome0)

# Class: cm:AttOpd2 (Another appointment given)

AnnotationAssertion(rdfs:comment cm:AttOpd2 "Another APPOINTMENT given CDS 2")
AnnotationAssertion(rdfs:label cm:AttOpd2 "Another appointment given")
SubClassOf(cm:AttOpd2 cm:AttOutcome0)

# Class: cm:AttOpd3 (Appointment to be made at a later date)

AnnotationAssertion(rdfs:comment cm:AttOpd3 "APPOINTMENT to be made at a later date CDS 3")
AnnotationAssertion(rdfs:label cm:AttOpd3 "Appointment to be made at a later date")
SubClassOf(cm:AttOpd3 cm:AttOutcome0)

# Class: cm:AttOutcome0 (Attendance outcome)

AnnotationAssertion(rdfs:comment cm:AttOutcome0 "Outcome of the attendance in outpatients")
AnnotationAssertion(rdfs:label cm:AttOutcome0 "Attendance outcome")
SubClassOf(cm:AttOutcome0 cm:CareAdministration)

# Class: cm:AttnotAtt3 (Did not attend  with no advance warning)

AnnotationAssertion(rdfs:comment cm:AttnotAtt3 "Did not attend - no advance warning given CDS 3")
AnnotationAssertion(rdfs:label cm:AttnotAtt3 "Did not attend  with no advance warning")
SubClassOf(cm:AttnotAtt3 cm:DidNotAttend)

# Class: cm:AttnotAtt4 (Cancelled or postponed by the Health Care Provider)

AnnotationAssertion(rdfs:comment cm:AttnotAtt4 "APPOINTMENT cancelled or postponed by the Health Care Provider CDS 4")
AnnotationAssertion(rdfs:label cm:AttnotAtt4 "Cancelled or postponed by the Health Care Provider")
SubClassOf(cm:AttnotAtt4 cm:AttNotAttNot)

# Class: cm:CancelHospEvent (Cancellation of event or encounter in hospital setting)

AnnotationAssertion(rdfs:comment cm:CancelHospEvent "Marks an event which cancels a preceding event such as cancelling a discharge")
AnnotationAssertion(rdfs:label cm:CancelHospEvent "Cancellation of event or encounter in hospital setting")
SubClassOf(cm:CancelHospEvent ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital)))

# Class: cm:CareAdministration (Care administration)

AnnotationAssertion(rdfs:comment cm:CareAdministration "A process of care administration such as an admission discharge or administration node")
AnnotationAssertion(rdfs:label cm:CareAdministration "Care administration")
SubClassOf(cm:CareAdministration cm:HealthAndCare)

# Class: cm:CareSetting (Care setting)

AnnotationAssertion(rdfs:comment cm:CareSetting "A setting in which care takes place (e.g. in an encounter)")
AnnotationAssertion(rdfs:label cm:CareSetting "Care setting")
SubClassOf(cm:CareSetting cm:HealthAndCare)

# Class: cm:ClinicEncounter (Clinic or health centre consultation)

AnnotationAssertion(rdfs:comment cm:ClinicEncounter "A consultation that occurs in primary care premises such as a nurse or GP run clinic")
AnnotationAssertion(rdfs:label cm:ClinicEncounter "Clinic or health centre consultation")
EquivalentClasses(cm:ClinicEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Clinic_or_Health_Centre) ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup)))

# Class: cm:Clinic_or_Health_Centre (Clinic or Health Centre)

AnnotationAssertion(rdfs:comment cm:Clinic_or_Health_Centre "A care setting in a community clinic or health centre that is not a gp surgery")
AnnotationAssertion(rdfs:label cm:Clinic_or_Health_Centre "Clinic or Health Centre")
SubClassOf(cm:Clinic_or_Health_Centre cm:OnPremises)

# Class: cm:CodeScheme (Code scheme)

AnnotationAssertion(rdfs:comment cm:CodeScheme "A code scheme identifier")
AnnotationAssertion(rdfs:label cm:CodeScheme "Code scheme")
SubClassOf(cm:CodeScheme cm:ModellingConcept)

# Class: cm:Computer (Computer)

AnnotationAssertion(rdfs:comment cm:Computer "A device which is a computer")
AnnotationAssertion(rdfs:label cm:Computer "Computer")
SubClassOf(cm:Computer cm:EncounterDevice)

# Class: cm:ComputerEncounter (Consultation with computer based device)

AnnotationAssertion(rdfs:comment cm:ComputerEncounter "A patient consulting with computer software via a device. Should not be confused with consultation with the patient via a computer.")
AnnotationAssertion(rdfs:label cm:ComputerEncounter "Consultation with computer based device")
EquivalentClasses(cm:ComputerEncounter ObjectIntersectionOf(cm:EncounterUsingDevice ObjectSomeValuesFrom(sn:SN_424226004 cm:Computer)))

# Class: cm:Consultation (Consultation)

AnnotationAssertion(rdfs:comment cm:Consultation "An interaction between a patient and health care professional, either directly face to face or indirectly by electronic means, not including administrative activities such as reports or admin processes such as admissions")
AnnotationAssertion(rdfs:label cm:Consultation "Consultation")
EquivalentClasses(cm:Consultation ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup)))

# Class: cm:CoreActive (Core active)

AnnotationAssertion(rdfs:comment cm:CoreActive "Core active status of concept")
AnnotationAssertion(rdfs:label cm:CoreActive "Core active")
SubClassOf(cm:CoreActive ObjectIntersectionOf(cm:ActiveStatus cm:CoreStatus))

# Class: cm:CoreDraft (Core draft status (component status))

AnnotationAssertion(rdfs:comment cm:CoreDraft "The concept is a core concept but is draft i.e. not published")
AnnotationAssertion(rdfs:label cm:CoreDraft "Core draft status (component status)")
SubClassOf(cm:CoreDraft ObjectIntersectionOf(cm:CoreStatus cm:DraftStatus))

# Class: cm:CoreInactive (Core inactive)

AnnotationAssertion(rdfs:comment cm:CoreInactive "A core concept that is now inactive")
AnnotationAssertion(rdfs:label cm:CoreInactive "Core inactive")
SubClassOf(cm:CoreInactive ObjectIntersectionOf(cm:CoreStatus cm:InactiveStatus))

# Class: cm:CoreSnapshot (Core snapshot (model document))

AnnotationAssertion(rdfs:comment cm:CoreSnapshot "Core snapshot of the core language model")
AnnotationAssertion(rdfs:label cm:CoreSnapshot "Core snapshot (model document)")
SubClassOf(cm:CoreSnapshot cm:ModelDocumentPurpose)

# Class: cm:CoreStatus (Core status)

AnnotationAssertion(rdfs:comment cm:CoreStatus "the usage status of the value is core")
AnnotationAssertion(rdfs:label cm:CoreStatus "Core status")
SubClassOf(cm:CoreStatus cm:UsageStatus)

# Class: cm:CreateEntry (Create entry)

AnnotationAssertion(rdfs:comment cm:CreateEntry "Creation of a new entry")
AnnotationAssertion(rdfs:label cm:CreateEntry "Create entry")
SubClassOf(cm:CreateEntry cm:CrudOperation)

# Class: cm:CrudOperation (CRUD operation)

AnnotationAssertion(rdfs:comment cm:CrudOperation "Create delete update or read operation on the data store")
AnnotationAssertion(rdfs:label cm:CrudOperation "CRUD operation")
SubClassOf(cm:CrudOperation cm:ProvenanceActivity)

# Class: cm:DISC_5059 (Data transformation)

AnnotationAssertion(rdfs:comment cm:DISC_5059 "transformation of data in the context of data provenance")
AnnotationAssertion(rdfs:label cm:DISC_5059 "Data transformation")
SubClassOf(cm:DISC_5059 cm:ProvenanceActivity)

# Class: cm:DISC_5061 (Scheduled activity)

AnnotationAssertion(rdfs:comment cm:DISC_5061 "An activity that affects a scheduled activity such as scheduling a report or cancancelling a scheduled report")
AnnotationAssertion(rdfs:label cm:DISC_5061 "Scheduled activity")
SubClassOf(cm:DISC_5061 cm:DISC_5062)

# Class: cm:DISC_5062 (System operation concept)

AnnotationAssertion(rdfs:comment cm:DISC_5062 "A concept that describes or affects the way a system operates")
AnnotationAssertion(rdfs:label cm:DISC_5062 "System operation concept")
SubClassOf(cm:DISC_5062 cm:ProvenanceActivity)

# Class: cm:DISC_5063 (Query scheduled)

AnnotationAssertion(rdfs:comment cm:DISC_5063 "A query has been scheduled to run")
AnnotationAssertion(rdfs:label cm:DISC_5063 "Query scheduled")
SubClassOf(cm:DISC_5063 cm:DISC_5061)

# Class: cm:DISC_5064 (Query cancelled)

AnnotationAssertion(rdfs:comment cm:DISC_5064 "The cancellation of a scheduled query")
AnnotationAssertion(rdfs:label cm:DISC_5064 "Query cancelled")
SubClassOf(cm:DISC_5064 cm:DISC_5061)

# Class: cm:DISC_5065 (Query started)

AnnotationAssertion(rdfs:comment cm:DISC_5065 "A query has started to run")
AnnotationAssertion(rdfs:label cm:DISC_5065 "Query started")
SubClassOf(cm:DISC_5065 cm:DISC_5061)

# Class: cm:DISC_5066 (Query Completed)

AnnotationAssertion(rdfs:comment cm:DISC_5066 "A query has completed")
AnnotationAssertion(rdfs:label cm:DISC_5066 "Query Completed")
SubClassOf(cm:DISC_5066 cm:DISC_5061)

# Class: cm:DISC_5067 (File placed in a directory)

AnnotationAssertion(rdfs:comment cm:DISC_5067 "A file is transferred or produced and placed in storage directory")
AnnotationAssertion(rdfs:label cm:DISC_5067 "File placed in a directory")
SubClassOf(cm:DISC_5067 cm:ProvenanceActivity)

# Class: cm:DISC_5068 (File downloaded)

AnnotationAssertion(rdfs:comment cm:DISC_5068 "A file is downloaded or uploaded from a source to a destination")
AnnotationAssertion(rdfs:label cm:DISC_5068 "File downloaded")
SubClassOf(cm:DISC_5068 cm:ProvenanceActivity)

# Class: cm:Day_case (Day case)

AnnotationAssertion(rdfs:label cm:Day_case "Day case")
SubClassOf(cm:Day_case cm:PersonCareType)

# Class: cm:DefinitionalStatus (Definitional status)

AnnotationAssertion(rdfs:comment cm:DefinitionalStatus "The definitional status of the concept e.g necessary or sufficient")
AnnotationAssertion(rdfs:label cm:DefinitionalStatus "Definitional status")
SubClassOf(cm:DefinitionalStatus cm:ModellingConcept)

# Class: cm:DeleteEntry (Delete entry)

AnnotationAssertion(rdfs:comment cm:DeleteEntry "Deletion of a current entry")
AnnotationAssertion(rdfs:label cm:DeleteEntry "Delete entry")
SubClassOf(cm:DeleteEntry cm:CrudOperation)

# Class: cm:DeltaUpdate (Core model delta update (model document))

AnnotationAssertion(rdfs:comment cm:DeltaUpdate "document that is a delta to a previous version")
AnnotationAssertion(rdfs:label cm:DeltaUpdate "Core model delta update (model document)")
SubClassOf(cm:DeltaUpdate cm:ModelDocumentPurpose)

# Class: cm:DidNotAttend (Did not attend)

AnnotationAssertion(rdfs:comment cm:DidNotAttend "Did not attend an appointment or encounter")
AnnotationAssertion(rdfs:label cm:DidNotAttend "Did not attend")
SubClassOf(cm:DidNotAttend cm:AttNotAttNot)

# Class: cm:DidNotAttendEncounter (Did not attend (encounter type))

AnnotationAssertion(rdfs:comment cm:DidNotAttendEncounter "An encounter that never happened as the patient did not attend")
AnnotationAssertion(rdfs:label cm:DidNotAttendEncounter "Did not attend (encounter type)")
EquivalentClasses(cm:DidNotAttendEncounter ObjectIntersectionOf(cm:AdministrativeEntry ObjectSomeValuesFrom(rm:attendanceStatus cm:DidNotAttend)))

# Class: cm:DisDest0 (Discharge destination)

AnnotationAssertion(rdfs:comment cm:DisDest0 "The destination of a PATIENT on completion of a Hospital Provider Spell, or a note that the PATIENT died or was a still birth.The type of place a patient was disharged to")
AnnotationAssertion(rdfs:label cm:DisDest0 "Discharge destination")
SubClassOf(cm:DisDest0 cm:CareAdministration)

# Class: cm:DisDest30 (Repatriation from high security psychiatric NHS Hospital)

AnnotationAssertion(rdfs:comment cm:DisDest30 "Repatriation from high security psychiatric accommodation in an NHS Hospital Provider (NHS Trust or NHS Foundation Trust) CDS 30")
AnnotationAssertion(rdfs:label cm:DisDest30 "Repatriation from high security psychiatric NHS Hospital")
SubClassOf(cm:DisDest30 cm:DisDest0)

# Class: cm:DisDest38 (Penal establishment or police station)

AnnotationAssertion(rdfs:comment cm:DisDest38 "Penal establishment or police station CDS 38")
AnnotationAssertion(rdfs:label cm:DisDest38 "Penal establishment or police station")
SubClassOf(cm:DisDest38 cm:DisDest0)

# Class: cm:DisDest48 (High Security Psychiatric Hospital, Scotland)

AnnotationAssertion(rdfs:comment cm:DisDest48 "High Security Psychiatric Hospital, Scotland CDS 48")
AnnotationAssertion(rdfs:label cm:DisDest48 "High Security Psychiatric Hospital, Scotland")
SubClassOf(cm:DisDest48 cm:DisDest0)

# Class: cm:DisDest49 (High security psychiatric NHS hospital)

AnnotationAssertion(rdfs:comment cm:DisDest49 "NHS other Hospital Provider - high security psychiatric accommodation CDS 49")
AnnotationAssertion(rdfs:label cm:DisDest49 "High security psychiatric NHS hospital")
SubClassOf(cm:DisDest49 cm:DisDest0)

# Class: cm:DisDest50 (Medium secure unit in NHS Hospital)

AnnotationAssertion(rdfs:comment cm:DisDest50 "NHS other Hospital Provider - medium secure unit CDS 50")
AnnotationAssertion(rdfs:label cm:DisDest50 "Medium secure unit in NHS Hospital")
SubClassOf(cm:DisDest50 cm:DisDest0)

# Class: cm:DisDest51 (Another NHS Hospital ward for general patients or the younger physically disabled)

AnnotationAssertion(rdfs:comment cm:DisDest51 "NHS other Hospital Provider - WARD for general PATIENTS or the younger physically disabled CDS 51")
AnnotationAssertion(rdfs:label cm:DisDest51 "Another NHS Hospital ward for general patients or the younger physically disabled")
SubClassOf(cm:DisDest51 cm:DisDest0)

# Class: cm:DisDest79 (Not applicable - patient died or still birth)

AnnotationAssertion(rdfs:comment cm:DisDest79 "Not applicable - PATIENT died or still birth CDS 79")
AnnotationAssertion(rdfs:label cm:DisDest79 "Not applicable - patient died or still birth")
SubClassOf(cm:DisDest79 cm:DisDest0)

# Class: cm:DisDest84 (Medium secure unit in non NHS hospital)

AnnotationAssertion(rdfs:comment cm:DisDest84 "Non-NHS run hospital - medium secure unit CDS 84")
AnnotationAssertion(rdfs:label cm:DisDest84 "Medium secure unit in non NHS hospital")
SubClassOf(cm:DisDest84 cm:DisDest0)

# Class: cm:DisMethod0 (Discharge method)

AnnotationAssertion(rdfs:comment cm:DisMethod0 "The method of discharge from a Hospital Provider Spell")
AnnotationAssertion(rdfs:label cm:DisMethod0 "Discharge method")
SubClassOf(cm:DisMethod0 cm:CareAdministration)

# Class: cm:DisMethod1 (Discharged on clinical advice or with clinical consent)

AnnotationAssertion(rdfs:comment cm:DisMethod1 "PATIENT discharged on clinical advice or with clinical consent CDS 1")
AnnotationAssertion(rdfs:label cm:DisMethod1 "Discharged on clinical advice or with clinical consent")
SubClassOf(cm:DisMethod1 cm:DisMethod0)

# Class: cm:DisMethod2 (Discharged him/herself or was discharged by a relative or advocate)

AnnotationAssertion(rdfs:comment cm:DisMethod2 "PATIENT discharged him/herself or was discharged by a relative or advocate CDS 2")
AnnotationAssertion(rdfs:label cm:DisMethod2 "Discharged him/herself or was discharged by a relative or advocate")
SubClassOf(cm:DisMethod2 cm:DisMethod0)

# Class: cm:DisMethod3 (Discharged by mental health review tribunal Home Secretary or court)

AnnotationAssertion(rdfs:comment cm:DisMethod3 "PATIENT discharged by mental health review tribunal, Home Secretary or Court CDS 3")
AnnotationAssertion(rdfs:label cm:DisMethod3 "Discharged by mental health review tribunal Home Secretary or court")
SubClassOf(cm:DisMethod3 cm:DisMethod0)

# Class: cm:DisMethod4 (Not applicable - patient died)

AnnotationAssertion(rdfs:comment cm:DisMethod4 "PATIENT died CDS 4")
AnnotationAssertion(rdfs:label cm:DisMethod4 "Not applicable - patient died")
SubClassOf(cm:DisMethod4 cm:DisMethod0)

# Class: cm:DisMethod5 (StillBirth)

AnnotationAssertion(rdfs:comment cm:DisMethod5 "Stillbirth CDS 5")
AnnotationAssertion(rdfs:label cm:DisMethod5 "StillBirth")
SubClassOf(cm:DisMethod5 cm:DisMethod0)

# Class: cm:DisMethod6 (Discharged him/herself)

AnnotationAssertion(rdfs:comment cm:DisMethod6 "PATIENT discharged him/herself CDS 6")
AnnotationAssertion(rdfs:label cm:DisMethod6 "Discharged him/herself")
SubClassOf(cm:DisMethod6 cm:DisMethod2)

# Class: cm:DisMethod7 (Discharged by a relative or advocate)

AnnotationAssertion(rdfs:comment cm:DisMethod7 "PATIENT discharged by a relative or advocate CDS 7")
AnnotationAssertion(rdfs:label cm:DisMethod7 "Discharged by a relative or advocate")
SubClassOf(cm:DisMethod7 cm:DisMethod2)

# Class: cm:Discharge (Discharge (care administration))

AnnotationAssertion(rdfs:comment cm:Discharge "The care processof discharging a patient")
AnnotationAssertion(rdfs:label cm:Discharge "Discharge (care administration)")
SubClassOf(cm:Discharge cm:CareAdministration)

# Class: cm:DraftRelease (Draft release)

AnnotationAssertion(rdfs:comment cm:DraftRelease "the release status of this document or component is draft")
AnnotationAssertion(rdfs:label cm:DraftRelease "Draft release")
SubClassOf(cm:DraftRelease cm:ReleaseStatus)

# Class: cm:DraftStatus (Draft status (model component))

AnnotationAssertion(rdfs:comment cm:DraftStatus "The status of the concept is draft i.e. not published")
AnnotationAssertion(rdfs:label cm:DraftStatus "Draft status (model component)")
SubClassOf(cm:DraftStatus ObjectIntersectionOf(cm:ActiveInactive cm:DraftRelease))

# Class: cm:EmailConsultation (Email consultation)

AnnotationAssertion(rdfs:comment cm:EmailConsultation "Consultation that took place by email")
AnnotationAssertion(rdfs:label cm:EmailConsultation "Email consultation")
EquivalentClasses(cm:EmailConsultation ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup) ObjectSomeValuesFrom(sn:SN_424226004 sn:SN_721421000000101)))

# Class: cm:EmergAdmitEncounter (Emergency admission)

AnnotationAssertion(rdfs:comment cm:EmergAdmitEncounter "A record of an emergency admission as indicated by admission method")
AnnotationAssertion(rdfs:comment cm:EmergAdmitEncounter "Non elective admission including maternity admissions")
AnnotationAssertion(rdfs:label cm:EmergAdmitEncounter "Emergency admission")
EquivalentClasses(cm:EmergAdmitEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:isProcess cm:Admission) ObjectExactCardinality(1 cm:methodOfAdmssion cm:AdmMetEmergency)))

# Class: cm:EncounterDevice (Device used in encounter)

AnnotationAssertion(rdfs:comment cm:EncounterDevice "A device used in an encounter setting. These are general devices used in other settings but in this context are used in encounters")
AnnotationAssertion(rdfs:label cm:EncounterDevice "Device used in encounter")
SubClassOf(cm:EncounterDevice cm:HealthAndCare)

# Class: cm:EncounterType (Type of encounter)

AnnotationAssertion(rdfs:comment cm:EncounterType "The overall nature of an encounter i.e. what is it about. The type also determines the subsequent properties associated with a similar record class subtype of encounter")
AnnotationAssertion(rdfs:label cm:EncounterType "Type of encounter")
SubClassOf(cm:EncounterType cm:HealthAndCare)

# Class: cm:EncounterUsingDevice (Consultation using electronic device)

AnnotationAssertion(rdfs:label cm:EncounterUsingDevice "Consultation using electronic device")
EquivalentClasses(cm:EncounterUsingDevice ObjectIntersectionOf(cm:Consultation ObjectSomeValuesFrom(cm:usesDevice cm:EncounterDevice)))

# Class: cm:Encowincu (Consultation in walk-in out of hours or urgent care centre)

AnnotationAssertion(rdfs:label cm:Encowincu "Consultation in walk-in out of hours or urgent care centre")
EquivalentClasses(cm:Encowincu ObjectIntersectionOf(cm:Consultation ObjectSomeValuesFrom(cm:care_setting cm:oohwuc)))

# Class: cm:EndHospEvent (End of encounter event in hospital setting)

AnnotationAssertion(rdfs:comment cm:EndHospEvent "Marks the event that signals an end of a spell in hospital or an outpatient visit or ending of waiting list entry")
AnnotationAssertion(rdfs:label cm:EndHospEvent "End of encounter event in hospital setting")
SubClassOf(cm:EndHospEvent ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital)))

# Class: cm:Field (Field (care setting))

AnnotationAssertion(rdfs:comment cm:Field "A setting for care outside care institutions and the home e.g. street or mountain")
AnnotationAssertion(rdfs:label cm:Field "Field (care setting)")
SubClassOf(cm:Field cm:CareSetting)

# Class: cm:FilingDocEncounter (Filing of document or report)

AnnotationAssertion(rdfs:label cm:FilingDocEncounter "Filing of document or report")
EquivalentClasses(cm:FilingDocEncounter ObjectIntersectionOf(cm:AdministrativeEntry ObjectSomeValuesFrom(cm:method cm:ReportFiled)))

# Class: cm:GConsultationGroup (Consultation Group)

AnnotationAssertion(cm:usedIn cm:GConsultationGroup "Consultation - has participants")
AnnotationAssertion(rdfs:comment cm:GConsultationGroup "Indicating a type of grouping of patients and healthcare professionals representing a consultation e.g. patient and health professional, or team")
AnnotationAssertion(rdfs:label cm:GConsultationGroup "Consultation Group")
SubClassOf(cm:GConsultationGroup cm:HealthAndCare)

# Class: cm:GPSurgeryConsultation (GP surgery consultation)

AnnotationAssertion(rdfs:comment cm:GPSurgeryConsultation "A consultation that takes place in a general practice surgery or GP clinic i.e. is a GP service led consultation. This will include nurse consultations in the context of general practice")
AnnotationAssertion(rdfs:label cm:GPSurgeryConsultation "GP surgery consultation")
EquivalentClasses(cm:GPSurgeryConsultation ObjectIntersectionOf(cm:EncounterType ObjectIntersectionOf(ObjectSomeValuesFrom(cm:care_setting cm:General_Practice_surgery) ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup))))

# Class: cm:General_Practice_surgery (General Practice surgery)

AnnotationAssertion(rdfs:comment cm:General_Practice_surgery "A setting for the provision of care taking place within a GP surgery")
AnnotationAssertion(rdfs:label cm:General_Practice_surgery "General Practice surgery")
SubClassOf(cm:General_Practice_surgery cm:OnPremises)

# Class: cm:HealthAndCare (Health and care)

AnnotationAssertion(rdfs:comment cm:HealthAndCare "Definition of concepts used in the health and care domain. These refer to clinical or administrative concepts, often recorded via health records.
Often referred to  codeable concepts, expressions, value sets, terminology.
The subclasses of this class define the meaning of these things but does not include the definition of the record entries themselves.
For example, a subclass may define a type of encounter such as a telephone encounter. However, an Encounter record entry is defined in the health record subclass hierarchy")
AnnotationAssertion(rdfs:label cm:HealthAndCare "Health and care")
DisjointClasses(cm:HealthAndCare rm:RecordModel)

# Class: cm:Home (Home (care setting))

AnnotationAssertion(rdfs:comment cm:Home "A care setting that is the patient's home")
AnnotationAssertion(rdfs:label cm:Home "Home (care setting)")
SubClassOf(cm:Home cm:CareSetting)

# Class: cm:HomeVisit (Home visit)

AnnotationAssertion(rdfs:comment cm:HomeVisit "Consultation in the patients home")
AnnotationAssertion(rdfs:label cm:HomeVisit "Home visit")
EquivalentClasses(cm:HomeVisit ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup) ObjectExactCardinality(1 cm:care_setting cm:Home)))

# Class: cm:HospOpdEncounter (Hospital outpatient)

AnnotationAssertion(rdfs:comment cm:HospOpdEncounter "Nature of encounter as a hospital outpatient")
AnnotationAssertion(rdfs:label cm:HospOpdEncounter "Hospital outpatient")
EquivalentClasses(cm:HospOpdEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:has_person_role cm:Outpatient) ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup) ObjectMinCardinality(0 rm:attendanceStatus) ObjectMinCardinality(0 rm:hasAttendanceOutcome)))

# Class: cm:Hospital (Hospital setting)

AnnotationAssertion(rdfs:comment cm:Hospital "A setting that is part of a hospital")
AnnotationAssertion(rdfs:label cm:Hospital "Hospital setting")
SubClassOf(cm:Hospital cm:OnPremises)

# Class: cm:HospitalAdmissionEncounter (Hospital admission)

AnnotationAssertion(rdfs:label cm:HospitalAdmissionEncounter "Hospital admission")
EquivalentClasses(cm:HospitalAdmissionEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:isProcess cm:Admission) ObjectMaxCardinality(1 cm:methodOfAdmssion cm:AdmissionMethod) ObjectMaxCardinality(1 cm:sourceOfAdmission cm:AdmissionSource) ObjectMaxCardinality(1 rm:admissionPatientClassification cm:AdmissionPatientClass)))

# Class: cm:HospitalDischargeEncounter (Hospital discharge)

AnnotationAssertion(rdfs:label cm:HospitalDischargeEncounter "Hospital discharge")
EquivalentClasses(cm:HospitalDischargeEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:isProcess cm:Discharge) ObjectMaxCardinality(1 cm:hasDischargeDestination cm:DisDest0) ObjectMaxCardinality(1 cm:hasDischargeMethod cm:DisMethod0)))

# Class: cm:HospitalEncounter (Hospital encounter)

AnnotationAssertion(rdfs:comment cm:HospitalEncounter "A sort of encounter or encounter process that takes place in hospital")
AnnotationAssertion(rdfs:label cm:HospitalEncounter "Hospital encounter")
EquivalentClasses(cm:HospitalEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital)))

# Class: cm:HospitalInpAdmitEncounter (Hospital inpatient admission)

AnnotationAssertion(rdfs:label cm:HospitalInpAdmitEncounter "Hospital inpatient admission")
EquivalentClasses(cm:HospitalInpAdmitEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:has_person_role cm:Inpatient) ObjectSomeValuesFrom(cm:isProcess cm:Admission)))

# Class: cm:HospitalInpDischEncounter (Hospital inpatient discharge)

AnnotationAssertion(rdfs:comment cm:HospitalInpDischEncounter "An encounter noting the dicharge of an inpatient")
AnnotationAssertion(rdfs:label cm:HospitalInpDischEncounter "Hospital inpatient discharge")
EquivalentClasses(cm:HospitalInpDischEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:has_person_role cm:Inpatient) ObjectSomeValuesFrom(cm:isProcess cm:Discharge)))

# Class: cm:HospitalInpEncounter (Hospital inpatient)

AnnotationAssertion(rdfs:label cm:HospitalInpEncounter "Hospital inpatient")
EquivalentClasses(cm:HospitalInpEncounter ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:has_person_role cm:Inpatient)))

# Class: cm:InactiveStatus (Inactive status)

AnnotationAssertion(rdfs:comment cm:InactiveStatus "the active-inactive status value is inactive")
AnnotationAssertion(rdfs:label cm:InactiveStatus "Inactive status")
SubClassOf(cm:InactiveStatus cm:ActiveInactive)

# Class: cm:Initial (Initial)

AnnotationAssertion(rdfs:comment cm:Initial "coming before all others in time or order")
AnnotationAssertion(rdfs:label cm:Initial "Initial")
SubClassOf(cm:Initial sn:SN_308913005)

# Class: cm:InitialAssessment (Initial assessment)

AnnotationAssertion(rdfs:comment cm:InitialAssessment "The initial evaluation of the patient")
AnnotationAssertion(rdfs:label cm:InitialAssessment "Initial assessment")
SubClassOf(cm:InitialAssessment cm:SN_386053000)

# Class: cm:Inpatient (Inpatient)

AnnotationAssertion(rdfs:label cm:Inpatient "Inpatient")
SubClassOf(cm:Inpatient cm:PersonCareType)

# Class: cm:LegacyActive (Legacy active)

AnnotationAssertion(rdfs:comment cm:LegacyActive "A concept that is a legacy concept but still active")
AnnotationAssertion(rdfs:label cm:LegacyActive "Legacy active")
SubClassOf(cm:LegacyActive ObjectIntersectionOf(cm:ActiveStatus cm:LegacyStatus))

# Class: cm:LegacyInactive (Legacy inactive)

AnnotationAssertion(rdfs:comment cm:LegacyInactive "A concept that is both legacy and inactive")
AnnotationAssertion(rdfs:label cm:LegacyInactive "Legacy inactive")
SubClassOf(cm:LegacyInactive ObjectIntersectionOf(cm:InactiveStatus cm:LegacyStatus))

# Class: cm:LegacyStatus (Legacy status)

AnnotationAssertion(rdfs:comment cm:LegacyStatus "the usage status of this property is legacy")
AnnotationAssertion(rdfs:label cm:LegacyStatus "Legacy status")
SubClassOf(cm:LegacyStatus cm:UsageStatus)

# Class: cm:MailToPatient (Mail or letter to patient)

AnnotationAssertion(rdfs:comment cm:MailToPatient "A letter or mail to a patient")
AnnotationAssertion(rdfs:label cm:MailToPatient "Mail or letter to patient")
SubClassOf(cm:MailToPatient cm:AdministrationFiling)

# Class: cm:MailToPatientEncounter (Mail or letter to patient (encounter))

AnnotationAssertion(rdfs:comment cm:MailToPatientEncounter "The noting of a mail or letter to a patient")
AnnotationAssertion(rdfs:label cm:MailToPatientEncounter "Mail or letter to patient (encounter)")
EquivalentClasses(cm:MailToPatientEncounter ObjectIntersectionOf(cm:AdministrativeEntry ObjectSomeValuesFrom(cm:method cm:MailToPatient)))

# Class: cm:MaternityAdmission (Maternity admission)

AnnotationAssertion(rdfs:comment cm:MaternityAdmission "Maternity admission record derived from either admission method or admission classification of patient")
AnnotationAssertion(rdfs:label cm:MaternityAdmission "Maternity admission")
EquivalentClasses(cm:MaternityAdmission ObjectIntersectionOf(cm:EncounterType ObjectUnionOf(ObjectExactCardinality(1 cm:methodOfAdmssion cm:AdmMetMaternity) ObjectExactCardinality(1 rm:admissionPatientClassification cm:AdmClassMotherBabyDelivery)) ObjectSomeValuesFrom(cm:care_setting cm:Hospital) ObjectSomeValuesFrom(cm:isProcess cm:Admission)))

# Class: cm:ModelComponentStatus (Model component status)

AnnotationAssertion(rdfs:comment cm:ModelComponentStatus "A status of this model component")
AnnotationAssertion(rdfs:label cm:ModelComponentStatus "Model component status")
SubClassOf(cm:ModelComponentStatus cm:ModellingConcept)

# Class: cm:ModelDeltaUpdate (Model delta update)

AnnotationAssertion(rdfs:comment cm:ModelDeltaUpdate "Delta update to an information model")
AnnotationAssertion(rdfs:label cm:ModelDeltaUpdate "Model delta update")
SubClassOf(cm:ModelDeltaUpdate cm:ModelDocumentPurpose)

# Class: cm:ModelDocumentInfo (Model document information)

AnnotationAssertion(rdfs:comment cm:ModelDocumentInfo "Information about model documents")
AnnotationAssertion(rdfs:label cm:ModelDocumentInfo "Model document information")
SubClassOf(cm:ModelDocumentInfo cm:ModellingConcept)

# Class: cm:ModelDocumentPurpose (Model document purpose)

AnnotationAssertion(rdfs:comment cm:ModelDocumentPurpose "Purpose of a particular model document")
AnnotationAssertion(rdfs:label cm:ModelDocumentPurpose "Model document purpose")
SubClassOf(cm:ModelDocumentPurpose cm:ModelDocumentInfo)

# Class: cm:ModellingConcept (Modelling concept)

AnnotationAssertion(rdfs:comment cm:ModellingConcept "Concept(s) involved in maintaining the information model")
AnnotationAssertion(rdfs:label cm:ModellingConcept "Modelling concept")
SubClassOf(cm:ModellingConcept cm:HealthAndCare)

# Class: cm:NHSPatient (cm:NHSPatient)

SubClassOf(cm:NHSPatient cm:Patient)

# Class: cm:NecessaryAndSufficient (Necessary and sufficient)

AnnotationAssertion(rdfs:comment cm:NecessaryAndSufficient "Concept definition is sufficient (equivalent status)")
AnnotationAssertion(rdfs:label cm:NecessaryAndSufficient "Necessary and sufficient")
SubClassOf(cm:NecessaryAndSufficient cm:DefinitionalStatus)

# Class: cm:NecessaryButInsufficient (Necessary but insufficient)

AnnotationAssertion(rdfs:comment cm:NecessaryButInsufficient "Definition is subtype which is not sufficient to full define the concept")
AnnotationAssertion(rdfs:label cm:NecessaryButInsufficient "Necessary but insufficient")
SubClassOf(cm:NecessaryButInsufficient cm:DefinitionalStatus)

# Class: cm:NightVisit (Night visit)

AnnotationAssertion(rdfs:comment cm:NightVisit "A visit to the patients home at night time")
AnnotationAssertion(rdfs:label cm:NightVisit "Night visit")
EquivalentClasses(cm:NightVisit ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:GConsultationGroup) ObjectExactCardinality(1 cm:care_setting cm:Home) ObjectExactCardinality(1 sn:SN_370134009 sn:SN_2546009)))

# Class: cm:NoteEncounter (Note entry)

AnnotationAssertion(rdfs:label cm:NoteEncounter "Note entry")
EquivalentClasses(cm:NoteEncounter ObjectIntersectionOf(cm:AdministrativeEntry ObjectSomeValuesFrom(cm:method cm:NoteEntered)))

# Class: cm:NoteEntered (Note entered)

AnnotationAssertion(rdfs:comment cm:NoteEntered "Note entered into record")
AnnotationAssertion(rdfs:label cm:NoteEntered "Note entered")
SubClassOf(cm:NoteEntered cm:AdministrationFiling)

# Class: cm:ObservationType (Type of observation)

AnnotationAssertion(rdfs:comment cm:ObservationType "what the observation is of e.g an observable entity or a diagnosis")
AnnotationAssertion(rdfs:label cm:ObservationType "Type of observation")
SubClassOf(cm:ObservationType cm:HealthAndCare)

# Class: cm:OnPremiseEncounter (Consultation on premise)

AnnotationAssertion(rdfs:comment cm:OnPremiseEncounter "An consultation that takes place on premises")
AnnotationAssertion(rdfs:label cm:OnPremiseEncounter "Consultation on premise")
EquivalentClasses(cm:OnPremiseEncounter ObjectIntersectionOf(cm:Consultation ObjectSomeValuesFrom(cm:care_setting cm:OnPremises)))

# Class: cm:OnPremises (Provider premises)

AnnotationAssertion(rdfs:comment cm:OnPremises "A care setting on some health provider premises")
AnnotationAssertion(rdfs:label cm:OnPremises "Provider premises")
SubClassOf(cm:OnPremises cm:CareSetting)

# Class: cm:OnWaitingList (On the waiting list)

AnnotationAssertion(rdfs:comment cm:OnWaitingList "A patient is currently on the waiting list")
AnnotationAssertion(rdfs:label cm:OnWaitingList "On the waiting list")
SubClassOf(cm:OnWaitingList cm:PersonCareType)

# Class: cm:OrganisationType (Type of organisation)

AnnotationAssertion(rdfs:comment cm:OrganisationType "Overall category of organisation such as an NHS organisation NHS Trust, General Practice etc")
AnnotationAssertion(rdfs:label cm:OrganisationType "Type of organisation")
SubClassOf(cm:OrganisationType cm:HealthAndCare)

# Class: cm:Outpatient (Outpatient)

AnnotationAssertion(rdfs:label cm:Outpatient "Outpatient")
SubClassOf(cm:Outpatient cm:PersonCareType)

# Class: cm:Patient (Patient)

AnnotationAssertion(rdfs:comment cm:Patient "An entity representing a person who is operating in the role of recepient of healthcare")
AnnotationAssertion(rdfs:label cm:Patient "Patient")
SubClassOf(cm:Patient cm:PeersonRole)

# Class: cm:Patient_and_health_professional (Patient and health professional)

AnnotationAssertion(rdfs:comment cm:Patient_and_health_professional "A grouping consisting of a patient and a HealthData professional")
AnnotationAssertion(rdfs:label cm:Patient_and_health_professional "Patient and health professional")
SubClassOf(cm:Patient_and_health_professional cm:GConsultationGroup)

# Class: cm:PeersonRole (Type of (or role of) a Person)

AnnotationAssertion(rdfs:comment cm:PeersonRole "A person in role of NHS patient, private patient or health professional.")
AnnotationAssertion(rdfs:label cm:PeersonRole "Type of (or role of) a Person")
SubClassOf(cm:PeersonRole cm:HealthAndCare)

# Class: cm:PersonCareType (Patient care classification (hospital))

AnnotationAssertion(rdfs:comment cm:PersonCareType "The label normally applied to a type or status of  a patient such as an inpatient or outpatient")
AnnotationAssertion(rdfs:label cm:PersonCareType "Patient care classification (hospital)")
SubClassOf(cm:PersonCareType cm:CareAdministration)

# Class: cm:Pre-admission (Pre-admission (care administration))

AnnotationAssertion(rdfs:comment cm:Pre-admission "The process of pre-admitting a patient")
AnnotationAssertion(rdfs:label cm:Pre-admission "Pre-admission (care administration)")
SubClassOf(cm:Pre-admission cm:CareAdministration)

# Class: cm:PreDsicharge (Pre-discharge (care administration))

AnnotationAssertion(rdfs:comment cm:PreDsicharge "Discharge of or preparation of discharge of a patient")
AnnotationAssertion(rdfs:label cm:PreDsicharge "Pre-discharge (care administration)")
SubClassOf(cm:PreDsicharge cm:CareAdministration)

# Class: cm:ProvenanceActivity (Provenance activity)

AnnotationAssertion(rdfs:comment cm:ProvenanceActivity "The activity that took place at this point in the provenance of an entry")
AnnotationAssertion(rdfs:label cm:ProvenanceActivity "Provenance activity")
SubClassOf(cm:ProvenanceActivity cm:HealthAndCare)

# Class: cm:PublishedStatus (Published status)

AnnotationAssertion(rdfs:comment cm:PublishedStatus "the release status of this document or component is published")
AnnotationAssertion(rdfs:label cm:PublishedStatus "Published status")
SubClassOf(cm:PublishedStatus cm:ReleaseStatus)

# Class: cm:RecordSection (Encounter section header)

AnnotationAssertion(rdfs:comment cm:RecordSection "Is a subheading within an encounter record")
AnnotationAssertion(rdfs:label cm:RecordSection "Encounter section header")
EquivalentClasses(cm:RecordSection ObjectIntersectionOf(rm:RecordModel ObjectExactCardinality(1 cm:partOfEncounter cm:EncounterType) ObjectMaxCardinality(1 cm:isUnderHeading cm:RecordSection) ObjectMaxCardinality(1 cm:partOfEncounter rm:EncounterRecord) DataExactCardinality(1 cm:hasHeading xsd:string)))
SubClassOf(cm:RecordSection rm:RecordModel)

# Class: cm:RecordUpdated (Record updated)

AnnotationAssertion(rdfs:comment cm:RecordUpdated "Patient record was updated")
AnnotationAssertion(rdfs:label cm:RecordUpdated "Record updated")
SubClassOf(cm:RecordUpdated cm:AdministrationFiling)

# Class: cm:ReferenceDocument (Reference document)

AnnotationAssertion(rdfs:comment cm:ReferenceDocument "An information model document that is for information purposes, not designed to update the target model directly")
AnnotationAssertion(rdfs:label cm:ReferenceDocument "Reference document")
SubClassOf(cm:ReferenceDocument cm:ModelDocumentPurpose)

# Class: cm:ReleaseStatus (Release status)

AnnotationAssertion(rdfs:comment cm:ReleaseStatus "Release or publication status of a document or component")
AnnotationAssertion(rdfs:label cm:ReleaseStatus "Release status")
SubClassOf(cm:ReleaseStatus cm:ModelComponentStatus)

# Class: cm:ReportFiled (Report filed)

AnnotationAssertion(rdfs:comment cm:ReportFiled "Document or report filed into record")
AnnotationAssertion(rdfs:label cm:ReportFiled "Report filed")
SubClassOf(cm:ReportFiled cm:AdministrationFiling)

# Class: cm:SN_386053000 (Assessment)

AnnotationAssertion(rdfs:comment cm:SN_386053000 "The process of assessment")
AnnotationAssertion(rdfs:label cm:SN_386053000 "Assessment")
SubClassOf(cm:SN_386053000 sn:SN_308913005)

# Class: cm:SrcAdmA1 (NHS Hospital  general ward / young disabled /A&E department)

AnnotationAssertion(rdfs:comment cm:SrcAdmA1 "NHS other Hospital Provider - WARD for general PATIENTS or the younger physically disabled or A & E department cds ype 51")
AnnotationAssertion(rdfs:label cm:SrcAdmA1 "NHS Hospital  general ward / young disabled /A&E department")
SubClassOf(cm:SrcAdmA1 cm:AdmissionSource)

# Class: cm:SrcAdmA2 (NHS Hospital maternity/ neonatal ward)

AnnotationAssertion(rdfs:comment cm:SrcAdmA2 "NHS other Hospital Provider - WARD for maternity PATIENTS or Neonates CDS type 51")
AnnotationAssertion(rdfs:label cm:SrcAdmA2 "NHS Hospital maternity/ neonatal ward")
SubClassOf(cm:SrcAdmA2 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA2 cm:DisDest0)

# Class: cm:SrcAdmA3 (Another NHS hospital ward for mental health or learning difficulties)

AnnotationAssertion(rdfs:comment cm:SrcAdmA3 "NHS other Hospital Provider - WARD for PATIENTS who are mentally ill or have Learning Disabilities CDS type 53")
AnnotationAssertion(rdfs:label cm:SrcAdmA3 "Another NHS hospital ward for mental health or learning difficulties")
SubClassOf(cm:SrcAdmA3 ObjectIntersectionOf(cm:AdmissionSource cm:DisDest0))

# Class: cm:SrcAdmA4 (NHS care home)

AnnotationAssertion(rdfs:comment cm:SrcAdmA4 "NHS run Care Home CDS type 54")
AnnotationAssertion(rdfs:label cm:SrcAdmA4 "NHS care home")
SubClassOf(cm:SrcAdmA4 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA4 cm:DisDest0)

# Class: cm:SrcAdmA5 (Local Authority residential/care home)

AnnotationAssertion(rdfs:comment cm:SrcAdmA5 "Local Authority residential accommodation i.e. where care is provided CDS type 65")
AnnotationAssertion(rdfs:label cm:SrcAdmA5 "Local Authority residential/care home")
SubClassOf(cm:SrcAdmA5 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA5 cm:DisDest0)

# Class: cm:SrcAdmA6 (Local Authority foster care)

AnnotationAssertion(rdfs:comment cm:SrcAdmA6 "Local Authority foster care CDS type 66")
AnnotationAssertion(rdfs:label cm:SrcAdmA6 "Local Authority foster care")
SubClassOf(cm:SrcAdmA6 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA6 cm:DisDest0)

# Class: cm:SrcAdmA7 (Baby born in or on the way to hospital)

AnnotationAssertion(rdfs:comment cm:SrcAdmA7 "Babies born in or on the way to hospital CDS type 79")
AnnotationAssertion(rdfs:label cm:SrcAdmA7 "Baby born in or on the way to hospital")
SubClassOf(cm:SrcAdmA7 cm:AdmissionSource)

# Class: cm:SrcAdmA8 (Non-NHS/none local authority care Home)

AnnotationAssertion(rdfs:comment cm:SrcAdmA8 "Non-NHS (other than Local Authority) run Care Home CDS type 85")
AnnotationAssertion(rdfs:label cm:SrcAdmA8 "Non-NHS/none local authority care Home")
SubClassOf(cm:SrcAdmA8 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA8 cm:DisDest0)

# Class: cm:SrcAdmA9 (None NHS hospital)

AnnotationAssertion(rdfs:comment cm:SrcAdmA9 "Non NHS run hospital CDS type 87")
AnnotationAssertion(rdfs:label cm:SrcAdmA9 "None NHS hospital")
SubClassOf(cm:SrcAdmA9 cm:AdmissionSource)
SubClassOf(cm:SrcAdmA9 cm:DisDest0)

# Class: cm:SrcAdmCo (Court)

AnnotationAssertion(rdfs:comment cm:SrcAdmCo "A court such as a HM Court CDS type 41, 37")
AnnotationAssertion(rdfs:label cm:SrcAdmCo "Court")
SubClassOf(cm:SrcAdmCo cm:DisDest0)
SubClassOf(cm:SrcAdmCo cm:SrcAdmPePoCo)

# Class: cm:SrcAdmPSyHosp (High security psychiatric accommodation in an NHS Hospital)

AnnotationAssertion(rdfs:comment cm:SrcAdmPSyHosp "NHS Hospital Provider - high security psychiatric accommodation in an NHS Hospital Provider (NHS Trust or NHS Foundation Trust) CDS type 49")
AnnotationAssertion(rdfs:label cm:SrcAdmPSyHosp "High security psychiatric accommodation in an NHS Hospital")
SubClassOf(cm:SrcAdmPSyHosp cm:AdmissionSource)

# Class: cm:SrcAdmPe (Penal establishment)

AnnotationAssertion(rdfs:comment cm:SrcAdmPe "Penal establishment CDS type 40")
AnnotationAssertion(rdfs:label cm:SrcAdmPe "Penal establishment")
SubClassOf(cm:SrcAdmPe cm:DisDest38)
SubClassOf(cm:SrcAdmPe cm:SrcAdmPePoCo)
DisjointClasses(cm:SrcAdmPe cm:SrcAdmPo)

# Class: cm:SrcAdmPePoCo (Penal establishment, Court, or Police Station / Police Custody Suite)

AnnotationAssertion(rdfs:comment cm:SrcAdmPePoCo "Penal establishment, Court, or Police Station / Police Custody Suite CDS types 39,40,41,42")
AnnotationAssertion(rdfs:label cm:SrcAdmPePoCo "Penal establishment, Court, or Police Station / Police Custody Suite")
SubClassOf(cm:SrcAdmPePoCo cm:AdmissionSource)

# Class: cm:SrcAdmPo (Police Station / Police Custody Suite)

AnnotationAssertion(rdfs:comment cm:SrcAdmPo "Police Station / Police Custody Suite CDS type 42")
AnnotationAssertion(rdfs:label cm:SrcAdmPo "Police Station / Police Custody Suite")
SubClassOf(cm:SrcAdmPo cm:DisDest38)
SubClassOf(cm:SrcAdmPo cm:SrcAdmPePoCo)

# Class: cm:SrcAdmTempR (Temporary place of residence)

AnnotationAssertion(rdfs:comment cm:SrcAdmTempR "Tempprary place of residence when usually resident elsewhere (e.g. hotels, residential Educational Establishments CDS type 29")
AnnotationAssertion(rdfs:label cm:SrcAdmTempR "Temporary place of residence")
SubClassOf(cm:SrcAdmTempR cm:AdmissionSource)
SubClassOf(cm:SrcAdmTempR cm:DisDest0)

# Class: cm:SrcAdmUsual (Usual place of residence)

AnnotationAssertion(rdfs:comment cm:SrcAdmUsual "Usual place of residence unless listed below, for example, a private dwelling whether owner occupied or owned by Local Authority, housing association or other landlord. This includes wardened accommodation but not residential accommodation where health care is provided. It also includes PATIENTS with no fixed abode.  CDS type 19")
AnnotationAssertion(rdfs:label cm:SrcAdmUsual "Usual place of residence")
SubClassOf(cm:SrcAdmUsual cm:AdmissionSource)
SubClassOf(cm:SrcAdmUsual cm:DisDest0)

# Class: cm:SrcAsmA10 (Non-NHS/non local authority hospice)

AnnotationAssertion(rdfs:comment cm:SrcAsmA10 "Non-NHS (other than Local Authority) run Hospice CDS type 88")
AnnotationAssertion(rdfs:label cm:SrcAsmA10 "Non-NHS/non local authority hospice")
SubClassOf(cm:SrcAsmA10 cm:AdmissionSource)
SubClassOf(cm:SrcAsmA10 cm:DisDest0)

# Class: cm:SurgeryPodEncounter (Consultation via surgery pod)

AnnotationAssertion(rdfs:comment cm:SurgeryPodEncounter "Consultation using the surgery pod device")
AnnotationAssertion(rdfs:label cm:SurgeryPodEncounter "Consultation via surgery pod")
EquivalentClasses(cm:SurgeryPodEncounter ObjectIntersectionOf(cm:EncounterUsingDevice ObjectSomeValuesFrom(sn:SN_424226004 cm:Surgery_pod)))

# Class: cm:Surgery_pod (Surgery pod)

AnnotationAssertion(rdfs:label cm:Surgery_pod "Surgery pod")
SubClassOf(cm:Surgery_pod cm:EncounterDevice)

# Class: cm:TeamMeeting (Team meeting or case discussion)

AnnotationAssertion(rdfs:comment cm:TeamMeeting "Team meeting or discussion about a case, not directly involving the patient")
AnnotationAssertion(rdfs:label cm:TeamMeeting "Team meeting or case discussion")
EquivalentClasses(cm:TeamMeeting ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:eam)))

# Class: cm:TelephoneConsultation (Telephone consultation)

AnnotationAssertion(rdfs:label cm:TelephoneConsultation "Telephone consultation")
EquivalentClasses(cm:TelephoneConsultation ObjectIntersectionOf(cm:EncounterUsingDevice ObjectSomeValuesFrom(sn:SN_424226004 sn:SN_359993007)))

# Class: cm:TelephoneTriage (Telephone triage consultation)

AnnotationAssertion(rdfs:comment cm:TelephoneTriage "Triage consultation over the telephone")
AnnotationAssertion(rdfs:label cm:TelephoneTriage "Telephone triage consultation")
EquivalentClasses(cm:TelephoneTriage ObjectIntersectionOf(cm:TelephoneConsultation ObjectSomeValuesFrom(cm:method cm:Triage)))

# Class: cm:ThirdPartyConsultation (Consultation with third party)

AnnotationAssertion(rdfs:comment cm:ThirdPartyConsultation "A consultation involving the health professional and a third party e.g. relative")
AnnotationAssertion(rdfs:label cm:ThirdPartyConsultation "Consultation with third party")
EquivalentClasses(cm:ThirdPartyConsultation ObjectIntersectionOf(cm:Consultation ObjectExactCardinality(1 cm:participants cm:hird_party_hcp)))

# Class: cm:ThirdPartyTelcon (Telephone consultation with third party)

AnnotationAssertion(rdfs:comment cm:ThirdPartyTelcon "Use of telephone consultation via a patients carer, representative, relative or relevant party other than the patient")
AnnotationAssertion(rdfs:label cm:ThirdPartyTelcon "Telephone consultation with third party")
EquivalentClasses(cm:ThirdPartyTelcon ObjectIntersectionOf(cm:EncounterType ObjectSomeValuesFrom(cm:participants cm:hird_party_hcp) ObjectSomeValuesFrom(sn:SN_424226004 sn:SN_359993007)))

# Class: cm:Transfer (Transfer event)

AnnotationAssertion(rdfs:comment cm:Transfer "Transfer of patient between two states or locations")
AnnotationAssertion(rdfs:label cm:Transfer "Transfer event")
SubClassOf(cm:Transfer cm:EncounterType)

# Class: cm:TransferCareClassification (Transfer care classification)

AnnotationAssertion(rdfs:comment cm:TransferCareClassification "Transfers a care classification")
AnnotationAssertion(rdfs:label cm:TransferCareClassification "Transfer care classification")
SubClassOf(cm:TransferCareClassification cm:Transfer)

# Class: cm:TransferInpOp (Transfer inpatient to outpatient)

AnnotationAssertion(rdfs:comment cm:TransferInpOp "The event of transferring the care classification from an inpatient to an outpatient")
AnnotationAssertion(rdfs:label cm:TransferInpOp "Transfer inpatient to outpatient")
SubClassOf(cm:TransferInpOp cm:TransferCareClassification)

# Class: cm:TransferOpInp (Transfer a patient from outpatient to inpatient)

AnnotationAssertion(rdfs:comment cm:TransferOpInp "The event of transferring a patient from inpatient to outpatient")
AnnotationAssertion(rdfs:label cm:TransferOpInp "Transfer a patient from outpatient to inpatient")
EquivalentClasses(cm:TransferOpInp ObjectIntersectionOf(cm:TransferCareClassification ObjectExactCardinality(1 cm:fromCareClassification cm:Outpatient) ObjectExactCardinality(1 cm:toCareClassification cm:Inpatient)))

# Class: cm:TransferWl (Transfer on waiting list)

AnnotationAssertion(rdfs:label cm:TransferWl "Transfer on waiting list")
AnnotationAssertion(owl:versionInfo cm:TransferWl "The event of transferring someone on the waiting list")
SubClassOf(cm:TransferWl cm:TransferCareClassification)

# Class: cm:TransferWlInpOp (Transfer on waiting list inpatient to outpatient)

AnnotationAssertion(rdfs:comment cm:TransferWlInpOp "The event of transferring an inpatient to an outpatient on the waiting list")
AnnotationAssertion(rdfs:label cm:TransferWlInpOp "Transfer on waiting list inpatient to outpatient")
EquivalentClasses(cm:TransferWlInpOp ObjectIntersectionOf(cm:TransferWl ObjectSomeValuesFrom(cm:onCareClassification cm:OnWaitingList) ObjectExactCardinality(1 cm:fromCareClassification cm:Inpatient) ObjectExactCardinality(1 cm:toCareClassification cm:Outpatient)))

# Class: cm:TransferWlOpInp (Transfer on waiting list outpatient to inpatient)

AnnotationAssertion(rdfs:comment cm:TransferWlOpInp "The event of transferring a waiting list from outpatient to inpatient")
AnnotationAssertion(rdfs:label cm:TransferWlOpInp "Transfer on waiting list outpatient to inpatient")
EquivalentClasses(cm:TransferWlOpInp ObjectIntersectionOf(cm:TransferWl ObjectSomeValuesFrom(cm:fromCareClassification cm:Outpatient) ObjectSomeValuesFrom(cm:onCareClassification cm:OnWaitingList) ObjectSomeValuesFrom(cm:toCareClassification cm:Inpatient)))

# Class: cm:Triage (Triage assessment)

AnnotationAssertion(rdfs:comment cm:Triage "Triage or triage asessment")
AnnotationAssertion(rdfs:label cm:Triage "Triage assessment")
SubClassOf(cm:Triage cm:SN_386053000)

# Class: cm:TriageAssessmentEncounter (Triage assessment (encounter))

AnnotationAssertion(rdfs:comment cm:TriageAssessmentEncounter "A note of a triage assessment of some kind")
AnnotationAssertion(rdfs:label cm:TriageAssessmentEncounter "Triage assessment (encounter)")
EquivalentClasses(cm:TriageAssessmentEncounter ObjectIntersectionOf(sn:SN_325931000000109 ObjectSomeValuesFrom(cm:method cm:Triage)))

# Class: cm:UpdateEntry (Update entry)

AnnotationAssertion(rdfs:comment cm:UpdateEntry "The update of or edit of, a current entry")
AnnotationAssertion(rdfs:label cm:UpdateEntry "Update entry")
SubClassOf(cm:UpdateEntry cm:CrudOperation)

# Class: cm:UpdateRecordEncounter (Update patient record)

AnnotationAssertion(rdfs:comment cm:UpdateRecordEncounter "An activity that updates a patient record")
AnnotationAssertion(rdfs:label cm:UpdateRecordEncounter "Update patient record"@en)
EquivalentClasses(cm:UpdateRecordEncounter ObjectIntersectionOf(cm:AdministrativeEntry ObjectSomeValuesFrom(cm:method cm:RecordUpdated)))

# Class: cm:UsageStatus (Usage status)

AnnotationAssertion(rdfs:comment cm:UsageStatus "Status of use of a concept or component on the context of going forward")
AnnotationAssertion(rdfs:label cm:UsageStatus "Usage status")
SubClassOf(cm:UsageStatus cm:ModelComponentStatus)

# Class: cm:VideoConsultation (Video consultation)

AnnotationAssertion(rdfs:comment cm:VideoConsultation "Consultation that took place via video link")
AnnotationAssertion(rdfs:label cm:VideoConsultation "Video consultation")
EquivalentClasses(cm:VideoConsultation ObjectIntersectionOf(cm:EncounterUsingDevice ObjectSomeValuesFrom(sn:SN_424226004 sn:SN_257194007)))

# Class: cm:WlPreadmit (Pre-admission from waiting list)

AnnotationAssertion(rdfs:comment cm:WlPreadmit "Marking the patient from waiting list as pre-admitted")
AnnotationAssertion(rdfs:label cm:WlPreadmit "Pre-admission from waiting list")
EquivalentClasses(cm:WlPreadmit ObjectIntersectionOf(cm:TransferWl ObjectSomeValuesFrom(cm:onCareClassification cm:OnWaitingList) ObjectExactCardinality(1 cm:toCareClassification cm:Day_case)))

# Class: cm:eam (Team)

AnnotationAssertion(rdfs:comment cm:eam "Team or group either adhoc or permanently established")
AnnotationAssertion(rdfs:label cm:eam "Team")
SubClassOf(cm:eam cm:GConsultationGroup)

# Class: cm:hird_party_hcp (Third party and Healthcare professional)

AnnotationAssertion(rdfs:comment cm:hird_party_hcp "A grouping consisting of a third party and a HealthData professional")
AnnotationAssertion(rdfs:label cm:hird_party_hcp "Third party and Healthcare professional")
SubClassOf(cm:hird_party_hcp cm:GConsultationGroup)

# Class: cm:oohwuc (Walk-in out of hours or urgent care centre)

AnnotationAssertion(rdfs:comment cm:oohwuc "A care setting in an out of hours centre, walkin centre or urgent care centre")
AnnotationAssertion(rdfs:label cm:oohwuc "Walk-in out of hours or urgent care centre")
SubClassOf(cm:oohwuc cm:OnPremises)

# Class: cm:ransactionalUpdate (Transactional update (model document))

AnnotationAssertion(rdfs:comment cm:ransactionalUpdate "Document contains a set of transactional updates")
AnnotationAssertion(rdfs:label cm:ransactionalUpdate "Transactional update (model document)")
SubClassOf(cm:ransactionalUpdate cm:ModelDocumentPurpose)

# Class: rm:ENProvenanceEntity (Provenance entity)

AnnotationAssertion(rdfs:comment rm:ENProvenanceEntity "A record of the provenance of an entry in a data store")
AnnotationAssertion(rdfs:label rm:ENProvenanceEntity "Provenance entity")
SubClassOf(rm:ENProvenanceEntity rm:RecordModel)

# Class: rm:EncounterRecord (Encounter record)

AnnotationAssertion(rdfs:comment rm:EncounterRecord "A record entry about an encounter, which is an interaction between a patient (or on behalf of the patient) and a health professional or health provider. 
It includes consultations as well as care processes such as admission, discharges. It also includes the noting of a filing of a document or report. Each encounter subclass is given a type which is then used to determine the additional properties expected in the record.
Specialised encounters are further defined as subclasses by additional properties commensurate with the encounter type")
AnnotationAssertion(rdfs:label rm:EncounterRecord "Encounter record")
EquivalentClasses(rm:EncounterRecord ObjectIntersectionOf(rm:HealthEvent ObjectExactCardinality(1 cm:hasEncounterType cm:EncounterType) ObjectExactCardinality(1 cm:hasSubject cm:Patient) ObjectMaxCardinality(1 cm:isSubsidiaryTo rm:EncounterRecord)))

# Class: rm:HealthEvent (Health event)

AnnotationAssertion(rdfs:comment rm:HealthEvent "A major provenanced entry in a health record. Something relating to health that has happened over a period of time, or is planned to happen at a time in the future.
The main differentiator between this and other events is that the state relating to the event lasts as long as the event. States that last longer, such as paient demographics, regisatrion, or problems are modelled in related entities")
AnnotationAssertion(rdfs:label rm:HealthEvent "Health event")
EquivalentClasses(rm:HealthEvent ObjectIntersectionOf(rm:RecordModel ObjectExactCardinality(1 cm:hasDataController rm:Organisation) DataExactCardinality(1 cm:hasEffectiveDate cm:DateTime) DataMaxCardinality(1 cm:hasEndTime cm:DateTime)))
SubClassOf(rm:HealthEvent rm:RecordModel)

# Class: rm:HospitalSpell (Hospital inpatient stay (encounter record))

AnnotationAssertion(rdfs:comment rm:HospitalSpell "An encounter covering a stay in hospital, the encounter having subencounters for admissin, discharge, ior transfer etc")
AnnotationAssertion(rdfs:label rm:HospitalSpell "Hospital inpatient stay (encounter record)")
EquivalentClasses(rm:HospitalSpell ObjectIntersectionOf(rm:EncounterRecord ObjectSomeValuesFrom(cm:haSubsidiary arc:HospitalAdmission) ObjectSomeValuesFrom(cm:haSubsidiary arc:HospitalDischarge) ObjectExactCardinality(1 cm:hasEncounterType cm:HospitalInpEncounter)))

# Class: rm:Identifier (Identifier)

AnnotationAssertion(rdfs:comment rm:Identifier "A business related identifier, usually some national code scheme. The relevant archetype defines the precise scheme url for an identifer used in interop

For example:
A person has identifier exactly 1 Identifier.
NHS Patient (archetype) has identifier excalty 1 NHS identifier
NHS Identifier is a subclass of Identifier
NHS Identifier has identifier scheme 'https://fhir.nhs.uk/Id/nhs-number'")
AnnotationAssertion(rdfs:label rm:Identifier "Identifier")
EquivalentClasses(rm:Identifier ObjectIntersectionOf(rm:RecordModel DataExactCardinality(1 cm:hasIdentifierScheme xsd:string) DataExactCardinality(1 cm:hasIdentifierValue xsd:string)))

# Class: rm:NHSOrganisation (NHS organisation record)

AnnotationAssertion(rdfs:comment rm:NHSOrganisation "Holds the extended and constrained properties of A NHS organisation records including the identifier scheme and NHS specific organisation properties.")
AnnotationAssertion(rdfs:label rm:NHSOrganisation "NHS organisation record")
EquivalentClasses(rm:NHSOrganisation ObjectIntersectionOf(rm:Organisation ObjectExactCardinality(1 cm:hasIdentifier ObjectIntersectionOf(rm:Identifier DataHasValue(cm:hasIdentifierScheme "https://fhir.nhs.uk/Id/ods-organization-code")))))

# Class: rm:Observation (Observation record)

AnnotationAssertion(rdfs:comment rm:Observation "A type observation relating to the state of a patient including signs symptoms pathology")
AnnotationAssertion(rdfs:label rm:Observation "Observation record")
EquivalentClasses(rm:Observation ObjectIntersectionOf(rm:HealthEvent ObjectExactCardinality(1 cm:hasObservationType cm:ObservationType) ObjectExactCardinality(1 cm:hasSubject cm:Patient) ObjectMaxCardinality(1 cm:isSubcomponentOf rm:Observation)))

# Class: rm:Organisation (Organisation record)

AnnotationAssertion(rdfs:comment rm:Organisation "Record of an organisation , A legal entity, service or a group with a common purpose.
Has an organisation type which determines the extended properties")
AnnotationAssertion(rdfs:label rm:Organisation "Organisation record")
EquivalentClasses(rm:Organisation ObjectIntersectionOf(rm:RecordModel ObjectExactCardinality(1 cm:hasIdentifier rm:Identifier) ObjectExactCardinality(1 rm:hasOrganisationType cm:OrganisationType)))

# Class: rm:Person (Person demographics)

AnnotationAssertion(rdfs:comment rm:Person "A record of key information about a person")
AnnotationAssertion(rdfs:label rm:Person "Person demographics")
EquivalentClasses(rm:Person ObjectIntersectionOf(rm:RecordModel ObjectExactCardinality(1 cm:hasDataController rm:Organisation) ObjectExactCardinality(1 cm:hasIdentifier rm:Identifier) ObjectExactCardinality(1 cm:hasPersonRole cm:PeersonRole)))

# Class: rm:ProvenanceSummary (Provenance Summary)

AnnotationAssertion(rdfs:comment rm:ProvenanceSummary "The summary of origin and latest provenance for the entry")
AnnotationAssertion(rdfs:label rm:ProvenanceSummary "Provenance Summary")
SubClassOf(rm:ProvenanceSummary rm:RecordModel)

# Class: rm:RecordModel (Health record)

AnnotationAssertion(rdfs:comment rm:RecordModel "Definitions of health record entries i.e. things that would be expected to be implemented in a health and care record schema. 
The subclasses of this include core record classes and properties as well as extended structures often referred to as profiles or archetypes.
Subclasses  of this do not define the meaning of the things being recorded.
The subclasses are used as the basis for designing conformant data models such as relational schemas. However, as the classes are part of the ontology and use the \"open world assumption\" they cannot themselves be directly used as constraints.")
AnnotationAssertion(rdfs:label rm:RecordModel "Health record")

# Class: sn:SN_224930009 (Services)

AnnotationAssertion(rdfs:comment sn:SN_224930009 "Service specialty types")
AnnotationAssertion(rdfs:label sn:SN_224930009 "Services")
SubClassOf(sn:SN_224930009 sn:SN_308913005)

# Class: sn:SN_2546009 (At night)

AnnotationAssertion(rdfs:comment sn:SN_2546009 "temporal aspect of being at night or nocturnal")
AnnotationAssertion(rdfs:label sn:SN_2546009 "At night")
SubClassOf(sn:SN_2546009 sn:SN_308913005)

# Class: sn:SN_257194007 (Video)

AnnotationAssertion(rdfs:label sn:SN_257194007 "Video")
SubClassOf(sn:SN_257194007 cm:EncounterDevice)

# Class: sn:SN_308913005 (Qualifier value (qualifier value))

AnnotationAssertion(rdfs:comment sn:SN_308913005 "Snomed CT qualifier value")
AnnotationAssertion(rdfs:label sn:SN_308913005 "Qualifier value (qualifier value)")
SubClassOf(sn:SN_308913005 cm:HealthAndCare)

# Class: sn:SN_325931000000109 (Assessment)

AnnotationAssertion(rdfs:comment sn:SN_325931000000109 "Snomed concept for encounter type  of assessment - 325931000000109")
AnnotationAssertion(rdfs:label sn:SN_325931000000109 "Assessment")
EquivalentClasses(sn:SN_325931000000109 ObjectIntersectionOf(cm:Consultation ObjectSomeValuesFrom(cm:method cm:SN_386053000)))

# Class: sn:SN_359993007 (Telephone)

AnnotationAssertion(rdfs:label sn:SN_359993007 "Telephone")
SubClassOf(sn:SN_359993007 cm:EncounterDevice)

# Class: sn:SN_721421000000101 (Email)

AnnotationAssertion(rdfs:label sn:SN_721421000000101 "Email")
SubClassOf(sn:SN_721421000000101 cm:EncounterDevice)

# Class: sn:SN_999002981000000107 (Accident and emergency arrival mode)

AnnotationAssertion(rdfs:comment sn:SN_999002981000000107 "A&E Arrival mode (UK reference set)")
AnnotationAssertion(rdfs:label sn:SN_999002981000000107 "Accident and emergency arrival mode")
SubClassOf(sn:SN_999002981000000107 cm:CareAdministration)

# Class: sn:SN_999002991000000109 (Accident and emergency attendance source)

AnnotationAssertion(rdfs:comment sn:SN_999002991000000109 "Reference set for an A&E attendance source (UK Somed reference set)")
AnnotationAssertion(rdfs:label sn:SN_999002991000000109 "Accident and emergency attendance source")
SubClassOf(sn:SN_999002991000000109 cm:CareAdministration)


DisjointClasses(cm:AEAttCat1 cm:AEAttCat2 cm:AEAttCat3)
DisjointClasses(cm:AEDepType1 cm:AEDepType2 cm:AEDepType3 cm:AEDepType4)
DisjointClasses(cm:AdmBabyRelated cm:AdmMetElective cm:AdmMetEmergency cm:AdmMetMaternity cm:AdmNonETransfer)
DisjointClasses(cm:AdmClassDayCase cm:AdmClassMotherBabyDelivery cm:AdmClassOrdinary cm:AdmClassRegularDay cm:AdmClassRegularNight)
DisjointClasses(cm:AdmMetBooked cm:AdmMetPlanned cm:AdmMethWa)
DisjointClasses(cm:AdminCat01 cm:AdminCat02 cm:AdminCat03 cm:AdminCat04)
DisjointClasses(cm:AttNotAtt00 cm:AttNotAtt2 cm:AttNotAtt5 cm:AttNotAtt6 cm:AttNotAtt7 cm:AttnotAtt3 cm:AttnotAtt4)
DisjointClasses(cm:AttOpd1 cm:AttOpd2 cm:AttOpd3)
DisjointClasses(cm:Day_case cm:Inpatient cm:Outpatient)
DisjointClasses(cm:NoteEntered cm:RecordUpdated cm:ReportFiled)
DisjointClasses(cm:SrcAdmA1 cm:SrcAdmA2 cm:SrcAdmA3 cm:SrcAdmA4 cm:SrcAdmA5 cm:SrcAdmA6 cm:SrcAdmA7 cm:SrcAdmA8 cm:SrcAdmA9 cm:SrcAdmPSyHosp cm:SrcAdmPePoCo cm:SrcAdmTempR cm:SrcAdmUsual cm:SrcAsmA10)
)